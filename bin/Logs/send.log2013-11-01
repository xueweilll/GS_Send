2013-11-01 15:53:41,327 [10][INFO ][M] - System start.
2013-11-01 15:53:47,661 [10][INFO ][M] - 服务 [订单实际出库数据送信] －－－－启动
2013-11-01 15:55:45,862 [9][INFO ][M] - System start.
2013-11-01 15:55:47,047 [9][INFO ][M] - 服务 [订单拣货详细数据送信] －－－－启动
2013-11-01 15:56:52,135 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 15:57:27,750 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 15:59:28,337 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]送信连接失败。
System.Net.WebException: 操作超时
   在 System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.ReceiveOrderInfos(String type, String xmlData, String time, String keys) 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 194
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 136
2013-11-01 16:00:14,576 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:00:35,121 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:00:56,711 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:01:19,019 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:01:39,565 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:02:00,094 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:02:20,639 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:02:41,185 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:03:02,760 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:03:23,305 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:03:43,850 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:04:04,380 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:04:24,941 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:04:45,477 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.IndexOutOfRangeException: 无法找到表 0。
   在 System.Data.DataTableCollection.get_Item(Int32 index)
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 150
2013-11-01 16:05:39,126 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]送信失败。
2013-11-01 16:05:39,126 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:06:01,262 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:06:23,383 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:06:44,381 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0128: 已在此范围定义了名为“actualNumber”的局部变量<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 281:                string recId = v[0];
行 282:                string actualNumber = v[1];
<font color=red>行 283:                string actualNumber = v[1];
</font>行 284:
行 285:                strSql = new StringBuilder();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  283
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zalpyman.18.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(283,24): error CS0128: 已在此范围定义了名为“actualNumber”的局部变量
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      string currentOrderId = "";行 154:                      string values = "";行 155:                      string actualGoodsAmount = "0";行 156:                      foreach (DataRow dr in ds.Tables[0].Rows)行 157:                      {行 158:                          string orderId = CConvert.ToString(dr["ORDER_ID"]);行 159:                          if (!currentOrderId.Equals(orderId))行 160:                          {行 161:                              if (currentOrderId == "")行 162:                              {行 163:                                  currentOrderId = orderId;行 164:                              }行 165:                              else行 166:                              {行 167:                                  retDr = dt.NewRow();行 168:                                  retDr["orderId"] = currentOrderId;行 169:                                  //更新行 170:                                  try行 171:                                  {行 172:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);行 173:                                  }行 174:                                  catch (Exception ex)行 175:                                  {行 176:                                      retDr["status"] = CConstant.ERROR;行 177:                                      _log.Error(currentOrderId, ex);行 178:                                  }行 179:                                  dt.Rows.Add(retDr);行 180:                                  values = "";行 181:                                  currentOrderId = orderId;行 182:                              }行 183:  行 184:                          }行 185:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 186:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 187:                      }行 188:  行 189:                      if (currentOrderId != "")行 190:                      {行 191:                          retDr = dt.NewRow();行 192:                          retDr["orderId"] = currentOrderId;行 193:                          //更新行 194:                          try行 195:                          {行 196:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);行 197:                          }行 198:                          catch (Exception ex)行 199:                          {行 200:                              retDr["status"] = CConstant.ERROR;行 201:                          }行 202:                          dt.Rows.Add(retDr);行 203:                      }行 204:                      ret = CConstant.SUCCESS;行 205:                  }行 206:              }行 207:              catch (Exception ex)行 208:              {行 209:                  ret = CConstant.ERROR;　//系统异常行 210:              }行 211:  行 212:              return ret + CCommon.DataSetToXml("order_info", dt);行 213:          }行 214:          #endregion行 215:  行 216:          #region 单张/多张订单的消息更新行 217:          /// <summary>行 218:          /// 单张/多张订单的消息更新行 219:          /// </summary>行 220:          /// <param name="type"></param>行 221:          /// <param name="values"></param>行 222:          /// <param name="time"></param>行 223:          /// <param name="keys"></param>行 224:          /// <returns></returns>行 225:          [WebMethod]行 226:          public string ReceiveMessage(string type, string values, string time, string keys)行 227:          {行 228:              string ret = "";行 229:  行 230:              try行 231:              {行 232:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 233:                  {行 234:                      ret = CConstant.NO_DATA;行 235:                  }行 236:                  else行 237:                  {行 238:                      switch (type)行 239:                      {行 240:                          case "single":行 241:                              break;行 242:                          case "list":行 243:                              break;行 244:                      }行 245:                  }行 246:              }行 247:              catch (Exception ex)行 248:              {行 249:                  ret = CConstant.ERROR;　//系统异常行 250:              }行 251:              return ret;行 252:          }行 253:          #endregion行 254:  行 255:      } //end class行 256:  }行 257:  行 258:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(283): error CS0128: 已在此范围定义了名为“actualNumber”的局部变量
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(283): error CS0128: 已在此范围定义了名为“actualNumber”的局部变量
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:07:06,845 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:07:28,810 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0029: 无法将类型“string”隐式转换为“decimal”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 280:                string[] v = value.Split('|');
行 281:                int recId = CConvert.ToInt32(v[0]);
<font color=red>行 282:                decimal actualNumber = v[1];
</font>行 283:                decimal actualAmount = v[2];
行 284:</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  282
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.enlisry3.10.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(282,40): error CS0029: 无法将类型“string”隐式转换为“decimal”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(283,40): error CS0029: 无法将类型“string”隐式转换为“decimal”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" whereorder_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = v[1];行 283:                  decimal actualAmount = v[2];行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number");行 288:                  strSql.Append(" where rec_id=@rec_id");行 289:                  MySqlParameter[] goodsParams = {行 290:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 291:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10)};行 292:                  goodsParams[0].Value = recId;行 293:                  goodsParams[1].Value = actualNumber;行 294:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 295:              }行 296:  行 297:              //帐户余额更新行 298:              strSql = new StringBuilder();行 299:              strSql.Append("update ecs_users set ");行 300:              strSql.Append("user_money=user_money+@user_money");行 301:              strSql.Append(" where user_id=@user_id");行 302:              MySqlParameter[] userParams = {行 303:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 304:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 305:  					};行 306:              userParams[0].Value = model.user_id;行 307:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 308:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 309:  行 310:              //账户余额变动记录行 311:              strSql = new StringBuilder();行 312:              strSql.Append("insert into ecs_account_log(");行 313:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 314:              strSql.Append(" values (");行 315:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 316:              MySqlParameter[] accountlogParams = {行 317:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 318:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 319:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 320:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 321:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 322:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 323:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 324:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 325:              accountlogParams[0].Value = model.user_id;行 326:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 327:              accountlogParams[2].Value = 0;行 328:              accountlogParams[3].Value = 0;行 329:              accountlogParams[4].Value = 0;行 330:              accountlogParams[5].Value = logTime;行 331:              accountlogParams[6].Value = "订单系统退款。";行 332:              accountlogParams[7].Value = 99;行 333:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 334:  行 335:              //执行行 336:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 337:              {行 338:                  ret = CConstant.SUCCESS;行 339:              }行 340:              else行 341:              {行 342:                  ret = CConstant.ERROR;行 343:              }行 344:              return ret;行 345:          }行 346:          #endregion行 347:  行 348:  行 349:          #region   得到一个对象实体行 350:          /// <summary>行 351:          /// 得到一个对象实体行 352:          /// </summary>行 353:          public BllOrderInfoTable GetModel(string order_id)行 354:          {行 355:  行 356:              StringBuilder strSql = new StringBuilder();行 357:              strSql.Append("select * from ecs_order_info ");行 358:              strSql.Append(" where order_id=@order_id");行 359:              MySqlParameter[] parameters = {行 360:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 361:              };行 362:              parameters[0].Value = order_id;行 363:  行 364:              BllOrderInfoTable model = new BllOrderInfoTable();行 365:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 366:              if (ds.Tables[0].Rows.Count > 0)行 367:              {行 368:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 369:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 370:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 371:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 372:                  {行 373:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 374:                  }行 375:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 376:                  {行 377:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 378:                  }行 379:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 380:                  {行 381:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 382:                  }行 383:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 384:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 385:                  {行 386:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 387:                  }行 388:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 389:                  {行 390:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 391:                  }行 392:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 393:                  {行 394:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 395:                  }行 396:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 397:                  {行 398:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 399:                  }行 400:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 401:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 402:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 403:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 404:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 405:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 406:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 407:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 408:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 409:                  {行 410:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 411:                  }行 412:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 413:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 414:                  {行 415:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 416:                  }行 417:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 418:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 419:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 420:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 421:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 422:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 423:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 424:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 425:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 426:                  {行 427:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 428:                  }行 429:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 430:                  {行 431:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 432:                  }行 433:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 434:                  {行 435:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 436:                  }行 437:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 438:                  {行 439:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 440:                  }行 441:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 442:                  {行 443:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 444:                  }行 445:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 446:                  {行 447:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 448:                  }行 449:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 450:                  {行 451:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 452:                  }行 453:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 454:                  {行 455:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 456:                  }行 457:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 458:                  {行 459:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 460:                  }行 461:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 462:                  {行 463:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 464:                  }行 465:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 466:                  {行 467:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 468:                  }行 469:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 470:                  {行 471:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 472:                  }行 473:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 474:                  {行 475:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 476:                  }行 477:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 478:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 479:                  {行 480:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 481:                  }行 482:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 483:                  {行 484:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 485:                  }行 486:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 487:                  {行 488:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 489:                  }行 490:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 491:                  {行 492:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 493:                  }行 494:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 495:                  {行 496:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 497:                  }行 498:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 499:                  {行 500:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 501:                  }行 502:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 503:                  {行 504:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 505:                  }行 506:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 507:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 508:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 509:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 510:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 511:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 512:                  {行 513:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 514:                  }行 515:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 516:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 517:                  {行 518:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 519:                  }行 520:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 521:                  //{行 522:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 523:                  //}行 524:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 525:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 526:                  {行 527:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 528:                  }行 529:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 530:                  {行 531:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 532:                  }行 533:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 534:                  {行 535:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 536:                  }行 537:                  return model;行 538:              }行 539:              else行 540:              {行 541:                  return null;行 542:              }行 543:          }行 544:          #endregion行 545:  行 546:  行 547:  行 548:      }//end class行 549:  }行 550:  行 551:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(282): error CS0029: 无法将类型“string”隐式转换为“decimal”
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(282): error CS0029: 无法将类型“string”隐式转换为“decimal”
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:07:50,930 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:08:13,083 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:08:35,219 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:08:58,213 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:09:20,334 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:09:42,049 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:10:02,751 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:10:23,436 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:10:44,138 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:11:05,026 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0103: 当前上下文中不存在名称“actual_amount”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 294:                goodsParams[0].Value = recId;
行 295:                goodsParams[1].Value = actualNumber;
<font color=red>行 296:                goodsParams[2].Value = actual_amount;
</font>行 297:                sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));
行 298:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  296
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.zbuobntb.9.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" whereorder_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "订单系统退款。";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296): error CS0103: 当前上下文中不存在名称“actual_amount”
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296): error CS0103: 当前上下文中不存在名称“actual_amount”
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:11:25,883 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0103: 当前上下文中不存在名称“actual_amount”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 294:                goodsParams[0].Value = recId;
行 295:                goodsParams[1].Value = actualNumber;
<font color=red>行 296:                goodsParams[2].Value = actual_amount;
</font>行 297:                sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));
行 298:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  296
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.wxmtc1py.28.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" whereorder_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "订单系统退款。";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296): error CS0103: 当前上下文中不存在名称“actual_amount”
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296): error CS0103: 当前上下文中不存在名称“actual_amount”
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:11:47,801 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0103: 当前上下文中不存在名称“actual_amount”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 294:                goodsParams[0].Value = recId;
行 295:                goodsParams[1].Value = actualNumber;
<font color=red>行 296:                goodsParams[2].Value = actual_amount;
</font>行 297:                sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));
行 298:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  296
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.fjh0ogxw.11.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" whereorder_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "订单[]差额退款。";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296): error CS0103: 当前上下文中不存在名称“actual_amount”
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296): error CS0103: 当前上下文中不存在名称“actual_amount”
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:12:08,690 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ugmo2aid.22.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:            
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:12:29,563 [14][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.qfjbba_o.12.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单["++"]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:12:50,451 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.tgcmmy-i.16.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:            
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:13:11,355 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sw5vxihv.24.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      string currentOrderId = "";行 154:                      string values = "";行 155:                      string actualGoodsAmount = "0";行 156:                      foreach (DataRow dr in ds.Tables[0].Rows)行 157:                      {行 158:                          string orderId = CConvert.ToString(dr["ORDER_ID"]);行 159:                          if (!currentOrderId.Equals(orderId))行 160:                          {行 161:                              if (currentOrderId == "")行 162:                              {行 163:                                  currentOrderId = orderId;行 164:                              }行 165:                              else行 166:                              {行 167:                                  retDr = dt.NewRow();行 168:                                  retDr["orderId"] = currentOrderId;行 169:                                  //更新行 170:                                  try行 171:                                  {行 172:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);行 173:                                  }行 174:                                  catch (Exception ex)行 175:                                  {行 176:                                      retDr["status"] = CConstant.ERROR;行 177:                                      _log.Error(currentOrderId, ex);行 178:                                  }行 179:                                  dt.Rows.Add(retDr);行 180:                                  values = "";行 181:                                  currentOrderId = orderId;行 182:                              }行 183:  行 184:                          }行 185:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 186:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 187:                      }行 188:  行 189:                      if (currentOrderId != "")行 190:                      {行 191:                          retDr = dt.NewRow();行 192:                          retDr["orderId"] = currentOrderId;行 193:                          //更新行 194:                          try行 195:                          {行 196:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);行 197:                          }行 198:                          catch (Exception ex)行 199:                          {行 200:                              retDr["status"] = CConstant.ERROR;行 201:                          }行 202:                          dt.Rows.Add(retDr);行 203:                      }行 204:                      ret = CConstant.SUCCESS;行 205:                  }行 206:              }行 207:              catch (Exception ex)行 208:              {行 209:                  ret = CConstant.ERROR;　//系统异常行 210:              }行 211:  行 212:              return ret + CCommon.DataSetToXml("order_info", dt);行 213:          }行 214:          #endregion行 215:  行 216:          #region 单张/多张订单的消息更新行 217:          /// <summary>行 218:          /// 单张/多张订单的消息更新行 219:          /// </summary>行 220:          /// <param name="type"></param>行 221:          /// <param name="values"></param>行 222:          /// <param name="time"></param>行 223:          /// <param name="keys"></param>行 224:          /// <returns></returns>行 225:          [WebMethod]行 226:          public string ReceiveMessage(string type, string values, string time, string keys)行 227:          {行 228:              string ret = "";行 229:  行 230:              try行 231:              {行 232:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 233:                  {行 234:                      ret = CConstant.NO_DATA;行 235:                  }行 236:                  else行 237:                  {行 238:                      switch (type)行 239:                      {行 240:                          case "single":行 241:                              break;行 242:                          case "list":行 243:                              break;行 244:                      }行 245:                  }行 246:              }行 247:              catch (Exception ex)行 248:              {行 249:                  ret = CConstant.ERROR;　//系统异常行 250:              }行 251:              return ret;行 252:          }行 253:          #endregion行 254:  行 255:      } //end class行 256:  }行 257:  行 258:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:13:32,197 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 56:         public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)
行 57:         {
<font color=red>行 58:             return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 59:         }
行 60:         #endregion</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs
            ?? <b>行:</b>  58
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 196:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);
行 197:                        }
<font color=red>行 198:                        catch (Exception ex)
</font>行 199:                        {
行 200:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 205:                }
行 206:            }
<font color=red>行 207:            catch (Exception ex)
</font>行 208:            {
行 209:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 245:                }
行 246:            }
<font color=red>行 247:            catch (Exception ex)
</font>行 248:            {
行 249:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.xnkpm1sc.24.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(207,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(247,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Collections.Generic;行 4:    using CZZD.GSZX.Common;行 5:    using CZZD.GSZX.Model;行 6:    using CZZD.GSZX.DAL;行 7:    namespace CZZD.GSZX.BLL行 8:    {行 9:        /// <summary>行 10:       /// ecs_order_info行 11:       /// </summary>行 12:       public class BBllOrderInfo行 13:       {行 14:           private readonly BllOrderInfoManage dal = new BllOrderInfoManage();行 15:           public BBllOrderInfo()行 16:           { }行 17:   行 18:           #region  送信行 19:           /// <summary>行 20:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 21:           /// </summary>行 22:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 23:           {行 24:               return dal.GetOrderIds(type, startTime, endTime, sendStatus, strWhere);行 25:           }行 26:   行 27:           /// <summary>行 28:           /// 订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 29:           /// </summary>行 30:           public DataSet GetOrders(string type, string orderID)行 31:           {行 32:               return dal.GetOrders(type, orderID);行 33:           }行 34:   行 35:           /// <summary>行 36:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 37:           /// </summary>行 38:           public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 39:           {行 40:               return dal.SelectOrders(type, startTime, endTime, sendStatus, strWhere);行 41:           }行 42:           #endregion行 43:   行 44:           #region 收信行 45:           /// <summary>行 46:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 47:           /// </summary>行 48:           public DataSet ReceiveOrderStatus(string type, string orderIDs)行 49:           {行 50:               return dal.ReceiveOrderStatus(type, orderIDs);行 51:           }行 52:   行 53:           /// <summary>行 54:           /// 单张订单实际金额，实际重量及账户余额的更新行 55:           /// </summary>行 56:           public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 57:           {行 58:               return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 59:           }行 60:           #endregion行 61:   行 62:   行 63:   行 64:   行 65:       }//end class行 66:   }行 67:   行 68:   </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:13:54,146 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 56:         public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)
行 57:         {
<font color=red>行 58:             return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 59:         }
行 60:         #endregion</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs
            ?? <b>行:</b>  58
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 246:                }
行 247:            }
<font color=red>行 248:            catch (Exception ex)
</font>行 249:            {
行 250:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ybhn0-8q.20.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(173,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(248,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Collections.Generic;行 4:    using CZZD.GSZX.Common;行 5:    using CZZD.GSZX.Model;行 6:    using CZZD.GSZX.DAL;行 7:    namespace CZZD.GSZX.BLL行 8:    {行 9:        /// <summary>行 10:       /// ecs_order_info行 11:       /// </summary>行 12:       public class BBllOrderInfo行 13:       {行 14:           private readonly BllOrderInfoManage dal = new BllOrderInfoManage();行 15:           public BBllOrderInfo()行 16:           { }行 17:   行 18:           #region  送信行 19:           /// <summary>行 20:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 21:           /// </summary>行 22:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 23:           {行 24:               return dal.GetOrderIds(type, startTime, endTime, sendStatus, strWhere);行 25:           }行 26:   行 27:           /// <summary>行 28:           /// 订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 29:           /// </summary>行 30:           public DataSet GetOrders(string type, string orderID)行 31:           {行 32:               return dal.GetOrders(type, orderID);行 33:           }行 34:   行 35:           /// <summary>行 36:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 37:           /// </summary>行 38:           public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 39:           {行 40:               return dal.SelectOrders(type, startTime, endTime, sendStatus, strWhere);行 41:           }行 42:           #endregion行 43:   行 44:           #region 收信行 45:           /// <summary>行 46:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 47:           /// </summary>行 48:           public DataSet ReceiveOrderStatus(string type, string orderIDs)行 49:           {行 50:               return dal.ReceiveOrderStatus(type, orderIDs);行 51:           }行 52:   行 53:           /// <summary>行 54:           /// 单张订单实际金额，实际重量及账户余额的更新行 55:           /// </summary>行 56:           public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 57:           {行 58:               return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 59:           }行 60:           #endregion行 61:   行 62:   行 63:   行 64:   行 65:       }//end class行 66:   }行 67:   行 68:   </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:14:15,050 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 56:         public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)
行 57:         {
<font color=red>行 58:             return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 59:         }
行 60:         #endregion</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs
            ?? <b>行:</b>  58
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 247:                }
行 248:            }
<font color=red>行 249:            catch (Exception ex)
</font>行 250:            {
行 251:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.prh5bckn.17.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(174,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(249,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlCo
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:14:35,954 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 247:                }
行 248:            }
<font color=red>行 249:            catch (Exception ex)
</font>行 250:            {
行 251:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.i_21psfg.16.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(165,50): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(174,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(183,50): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(191,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,47): error CS1502: 与“CZZD.GSZX.BLL.BBllOrderInfo.ReceiveOrderInfo(string, string, string, string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,74): error CS1503: 参数“2”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(249,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单["++"]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:14:56,858 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 56:         public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)
行 57:         {
<font color=red>行 58:             return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 59:         }
行 60:         #endregion</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs
            ?? <b>行:</b>  58
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 247:                }
行 248:            }
<font color=red>行 249:            catch (Exception ex)
</font>行 250:            {
行 251:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.0ysjwayp.18.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(174,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(191,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,47): error CS1502: 与“CZZD.GSZX.BLL.BBllOrderInfo.ReceiveOrderInfo(string, string, string, string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,74): error CS1503: 参数“2”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(249,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Collections.Generic;行 4:    using CZZD.GSZX.Common;行 5:    using CZZD.GSZX.Model;行 6:    using CZZD.GSZX.DAL;行 7:    namespace CZZD.GSZX.BLL行 8:    {行 9:        /// <summary>行 10:       /// ecs_order_info行 11:       /// </summary>行 12:       public class BBllOrderInfo行 13:       {行 14:           private readonly BllOrderInfoManage dal = new BllOrderInfoManage();行 15:           public BBllOrderInfo()行 16:           { }行 17:   行 18:           #region  送信行 19:           /// <summary>行 20:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 21:           /// </summary>行 22:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 23:           {行 24:               return dal.GetOrderIds(type, startTime, endTime, sendStatus, strWhere);行 25:           }行 26:   行 27:           /// <summary>行 28:           /// 订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 29:           /// </summary>行 30:           public DataSet GetOrders(string type, string orderID)行 31:           {行 32:               return dal.GetOrders(type, orderID);行 33:           }行 34:   行 35:           /// <summary>行 36:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 37:           /// </summary>行 38:           public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 39:           {行 40:               return dal.SelectOrders(type, startTime, endTime, sendStatus, strWhere);行 41:           }行 42:           #endregion行 43:   行 44:           #region 收信行 45:           /// <summary>行 46:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 47:           /// </summary>行 48:           public DataSet ReceiveOrderStatus(string type, string orderIDs)行 49:           {行 50:               return dal.ReceiveOrderStatus(type, orderIDs);行 51:           }行 52:   行 53:           /// <summary>行 54:           /// 单张订单实际金额，实际重量及账户余额的更新行 55:           /// </summary>行 56:           public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 57:           {行 58:               return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 59:           }行 60:           #endregion行 61:   行 62:   行 63:   行 64:   行 65:       }//end class行 66:   }行 67:   行 68:   </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:15:17,718 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 56:         public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)
行 57:         {
<font color=red>行 58:             return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 59:         }
行 60:         #endregion</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs
            ?? <b>行:</b>  58
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 247:                }
行 248:            }
<font color=red>行 249:            catch (Exception ex)
</font>行 250:            {
行 251:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.q8i4ulgc.15.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(174,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(191,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,47): error CS1502: 与“CZZD.GSZX.BLL.BBllOrderInfo.ReceiveOrderInfo(string, string, string, string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(198,74): error CS1503: 参数“2”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(249,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Collections.Generic;行 4:    using CZZD.GSZX.Common;行 5:    using CZZD.GSZX.Model;行 6:    using CZZD.GSZX.DAL;行 7:    namespace CZZD.GSZX.BLL行 8:    {行 9:        /// <summary>行 10:       /// ecs_order_info行 11:       /// </summary>行 12:       public class BBllOrderInfo行 13:       {行 14:           private readonly BllOrderInfoManage dal = new BllOrderInfoManage();行 15:           public BBllOrderInfo()行 16:           { }行 17:   行 18:           #region  送信行 19:           /// <summary>行 20:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 21:           /// </summary>行 22:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 23:           {行 24:               return dal.GetOrderIds(type, startTime, endTime, sendStatus, strWhere);行 25:           }行 26:   行 27:           /// <summary>行 28:           /// 订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 29:           /// </summary>行 30:           public DataSet GetOrders(string type, string orderID)行 31:           {行 32:               return dal.GetOrders(type, orderID);行 33:           }行 34:   行 35:           /// <summary>行 36:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 37:           /// </summary>行 38:           public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 39:           {行 40:               return dal.SelectOrders(type, startTime, endTime, sendStatus, strWhere);行 41:           }行 42:           #endregion行 43:   行 44:           #region 收信行 45:           /// <summary>行 46:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 47:           /// </summary>行 48:           public DataSet ReceiveOrderStatus(string type, string orderIDs)行 49:           {行 50:               return dal.ReceiveOrderStatus(type, orderIDs);行 51:           }行 52:   行 53:           /// <summary>行 54:           /// 单张订单实际金额，实际重量及账户余额的更新行 55:           /// </summary>行 56:           public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 57:           {行 58:               return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 59:           }行 60:           #endregion行 61:   行 62:   行 63:   行 64:   行 65:       }//end class行 66:   }行 67:   行 68:   </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:15:38,606 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 56:         public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)
行 57:         {
<font color=red>行 58:             return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 59:         }
行 60:         #endregion</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs
            ?? <b>行:</b>  58
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 248:                }
行 249:            }
<font color=red>行 250:            catch (Exception ex)
</font>行 251:            {
行 252:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a2xejcb5.16.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(175,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(192,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(199,47): error CS1502: 与“CZZD.GSZX.BLL.BBllOrderInfo.ReceiveOrderInfo(string, string, string, string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(199,74): error CS1503: 参数“2”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(250,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Collections.Generic;行 4:    using CZZD.GSZX.Common;行 5:    using CZZD.GSZX.Model;行 6:    using CZZD.GSZX.DAL;行 7:    namespace CZZD.GSZX.BLL行 8:    {行 9:        /// <summary>行 10:       /// ecs_order_info行 11:       /// </summary>行 12:       public class BBllOrderInfo行 13:       {行 14:           private readonly BllOrderInfoManage dal = new BllOrderInfoManage();行 15:           public BBllOrderInfo()行 16:           { }行 17:   行 18:           #region  送信行 19:           /// <summary>行 20:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 21:           /// </summary>行 22:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 23:           {行 24:               return dal.GetOrderIds(type, startTime, endTime, sendStatus, strWhere);行 25:           }行 26:   行 27:           /// <summary>行 28:           /// 订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 29:           /// </summary>行 30:           public DataSet GetOrders(string type, string orderID)行 31:           {行 32:               return dal.GetOrders(type, orderID);行 33:           }行 34:   行 35:           /// <summary>行 36:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 37:           /// </summary>行 38:           public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 39:           {行 40:               return dal.SelectOrders(type, startTime, endTime, sendStatus, strWhere);行 41:           }行 42:           #endregion行 43:   行 44:           #region 收信行 45:           /// <summary>行 46:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 47:           /// </summary>行 48:           public DataSet ReceiveOrderStatus(string type, string orderIDs)行 49:           {行 50:               return dal.ReceiveOrderStatus(type, orderIDs);行 51:           }行 52:   行 53:           /// <summary>行 54:           /// 单张订单实际金额，实际重量及账户余额的更新行 55:           /// </summary>行 56:           public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values)行 57:           {行 58:               return dal.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 59:           }行 60:           #endregion行 61:   行 62:   行 63:   行 64:   行 65:       }//end class行 66:   }行 67:   行 68:   </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:16:00,525 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0029: 无法将类型“string”隐式转换为“int”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 151:                    BBllOrderInfo bll = new BBllOrderInfo();
行 152:                    DataSet ds = CCommon.XmlToDataSet(xmlData);
<font color=red>行 153:                    int currentOrderId = "";
</font>行 154:                    string currentOrderSn = "";
行 155:                    string values = "";</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  153
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.1pxjnu8c.10.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(175,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(200,47): error CS1502: 与“CZZD.GSZX.BLL.BBllOrderInfo.ReceiveOrderInfo(string, string, string, string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(200,74): error CS1503: 参数“2”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = "";行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (!currentOrderId.Equals(orderId))行 162:                          {行 163:                              if (currentOrderId == "")行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != "")行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, actualGoodsAmount, values);行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                          }行 206:                          dt.Rows.Add(retDr);行 207:                      }行 208:                      ret = CConstant.SUCCESS;行 209:                  }行 210:              }行 211:              catch (Exception ex)行 212:              {行 213:                  ret = CConstant.ERROR;　//系统异常行 214:              }行 215:  行 216:              return ret + CCommon.DataSetToXml("order_info", dt);行 217:          }行 218:          #endregion行 219:  行 220:          #region 单张/多张订单的消息更新行 221:          /// <summary>行 222:          /// 单张/多张订单的消息更新行 223:          /// </summary>行 224:          /// <param name="type"></param>行 225:          /// <param name="values"></param>行 226:          /// <param name="time"></param>行 227:          /// <param name="keys"></param>行 228:          /// <returns></returns>行 229:          [WebMethod]行 230:          public string ReceiveMessage(string type, string values, string time, string keys)行 231:          {行 232:              string ret = "";行 233:  行 234:              try行 235:              {行 236:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 237:                  {行 238:                      ret = CConstant.NO_DATA;行 239:                  }行 240:                  else行 241:                  {行 242:                      switch (type)行 243:                      {行 244:                          case "single":行 245:                              break;行 246:                          case "list":行 247:                              break;行 248:                      }行 249:                  }行 250:              }行 251:              catch (Exception ex)行 252:              {行 253:                  ret = CConstant.ERROR;　//系统异常行 254:              }行 255:              return ret;行 256:          }行 257:          #endregion行 258:  行 259:      } //end class行 260:  }行 261:  行 262:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153): error CS0029: 无法将类型“string”隐式转换为“int”
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153): error CS0029: 无法将类型“string”隐式转换为“int”
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:16:21,382 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ims_4bao.9.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(175,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(200,47): error CS1502: 与“CZZD.GSZX.BLL.BBllOrderInfo.ReceiveOrderInfo(string, string, string, string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(200,74): error CS1503: 参数“2”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单["++"]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:16:42,270 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 116:                }
行 117:            }
<font color=red>行 118:            catch (Exception ex)
</font>行 119:            {
行 120:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.5jy_-wpb.0.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(250,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(118,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(175,55): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(200,47): error CS1501: “ReceiveOrderInfo”方法没有采用“5”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, string orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单["++"]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334): error CS1002: 应输入 ;
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:17:03,171 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.otlazuxu.16.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,20): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.ReceiveOrderInfo(string, string, string, string, string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(58,47): error CS1503: 参数“2”: 无法从“int”转换为“string”
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myR
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:17:24,075 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1002: 应输入 ;<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 332:            accountlogParams[4].Value = 0;
行 333:            accountlogParams[5].Value = logTime;
<font color=red>行 334:            accountlogParams[6].Value = "差额退款，订单["++"]";
</font>行 335:            accountlogParams[7].Value = 99;
行 336:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  334
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.3lc6qktk.23.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(334,53): error CS1002: 应输入 ;
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 1002:                 cmd.Parameters.Clear();行 1003:                 return myReader;行 1004:             }行 1005:             catch (System.Data.SqlClient.SqlException e)行 1006:             {行 1007:                 throw e;行 1008:    
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:17:45,010 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(string)”最匹配的重载方法具有一些无效参数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 256:
行 257:            //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态
<font color=red>行 258:            BllOrderInfoTable model = GetModel(orderId);
</font>行 259:            if (true)
行 260:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  258
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-ggvlkhx.8.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(258,39): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(258,48): error CS1503: 参数“1”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, int orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单[" + orderSn + "]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(string order_id)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = order_id;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(258): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(string)”最匹配的重载方法具有一些无效参数
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(258): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(string)”最匹配的重载方法具有一些无效参数
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:18:06,913 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(string)”最匹配的重载方法具有一些无效参数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 256:
行 257:            //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态
<font color=red>行 258:            BllOrderInfoTable model = GetModel(orderId);
</font>行 259:            if (true)
行 260:            {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  258
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sub9vgg7.17.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(258,39): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(string)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(258,48): error CS1503: 参数“1”: 无法从“int”转换为“string”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareComma
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:18:27,817 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nlezdyhe.25.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,47): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,56): error CS1503: 参数“1”: 无法从“string”转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = "";行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (!currentOrderId.Equals(orderId))行 162:                          {行 163:                              if (currentOrderId == "")行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != "")行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                          }行 206:                          dt.Rows.Add(retDr);行 207:                      }行 208:                      ret = CConstant.SUCCESS;行 209:                  }行 210:              }行 211:              catch (Exception ex)行 212:              {行 213:                  ret = CConstant.ERROR;　//系统异常行 214:              }行 215:  行 216:              return ret + CCommon.DataSetToXml("order_info", dt);行 217:          }行 218:          #endregion行 219:  行 220:          #region 单张/多张订单的消息更新行 221:          /// <summary>行 222:          /// 单张/多张订单的消息更新行 223:          /// </summary>行 224:          /// <param name="type"></param>行 225:          /// <param name="values"></param>行 226:          /// <param name="time"></param>行 227:          /// <param name="keys"></param>行 228:          /// <returns></returns>行 229:          [WebMethod]行 230:          public string ReceiveMessage(string type, string values, string time, string keys)行 231:          {行 232:              string ret = "";行 233:  行 234:              try行 235:              {行 236:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 237:                  {行 238:                      ret = CConstant.NO_DATA;行 239:                  }行 240:                  else行 241:                  {行 242:                      switch (type)行 243:                      {行 244:                          case "single":行 245:                              break;行 246:                          case "list":行 247:                              break;行 248:                      }行 249:                  }行 250:              }行 251:              catch (Exception ex)行 252:              {行 253:                  ret = CConstant.ERROR;　//系统异常行 254:              }行 255:              return ret;行 256:          }行 257:          #endregion行 258:  行 259:      } //end class行 260:  }行 261:  行 262:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:18:48,719 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 159:                {
行 160:                    //查看订单状态，最否己付款，是否未发货
<font color=red>行 161:                    BllOrderInfoTable model = GetModel(orderId);
</font>行 162:                    if (true)
行 163:                    {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  161
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.-kh-ukqv.3.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,47): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,56): error CS1503: 参数“1”: 无法从“string”转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(orderId);行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, int orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actual_amount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单[" + orderSn + "]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(int orderId)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = orderId;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:19:09,578 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.sabmn-ny.23.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,47): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,56): error CS1503: 参数“1”: 无法从“string”转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = "";行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (!currentOrderId.Equals(orderId))行 162:                          {行 163:                              if (currentOrderId == "")行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != "")行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                          }行 206:                          dt.Rows.Add(retDr);行 207:                      }行 208:                      ret = CConstant.SUCCESS;行 209:                  }行 210:              }行 211:              catch (Exception ex)行 212:              {行 213:                  ret = CConstant.ERROR;　//系统异常行 214:              }行 215:  行 216:              return ret + CCommon.DataSetToXml("order_info", dt);行 217:          }行 218:          #endregion行 219:  行 220:          #region 单张/多张订单的消息更新行 221:          /// <summary>行 222:          /// 单张/多张订单的消息更新行 223:          /// </summary>行 224:          /// <param name="type"></param>行 225:          /// <param name="values"></param>行 226:          /// <param name="time"></param>行 227:          /// <param name="keys"></param>行 228:          /// <returns></returns>行 229:          [WebMethod]行 230:          public string ReceiveMessage(string type, string values, string time, string keys)行 231:          {行 232:              string ret = "";行 233:  行 234:              try行 235:              {行 236:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 237:                  {行 238:                      ret = CConstant.NO_DATA;行 239:                  }行 240:                  else行 241:                  {行 242:                      switch (type)行 243:                      {行 244:                          case "single":行 245:                              break;行 246:                          case "list":行 247:                              break;行 248:                      }行 249:                  }行 250:              }行 251:              catch (Exception ex)行 252:              {行 253:                  ret = CConstant.ERROR;　//系统异常行 254:              }行 255:              return ret;行 256:          }行 257:          #endregion行 258:  行 259:      } //end class行 260:  }行 261:  行 262:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:19:30,450 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hdae9l43.25.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,47): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,56): error CS1503: 参数“1”: 无法从“string”转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 1002:                 cmd.Parameters.Clear();行 1003:                 return myReader;行 1004:             }行 1005:             catch (System.Data.SqlClient.SqlException e)行 1006:             {行 1007:                 throw e;行 1008:             }行 1009: 行 1010:         }行 1011: 行 1012:         /// <summary>行 1013:         /// 执行查询语句，返回DataSet行 1014:         /// </summary>行 1015:         /// <param name="SQLString">查询语句</param>行 1016:         /// <returns>DataSet</returns>行 1017:         public static DataSet Query(string SQLString, params SqlParameter[] cmdParms)行 1018:         {行 1019:             using (SqlConnection connection = new SqlConnection(connectionStri
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:19:51,338 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 159:                {
行 160:                    //查看订单状态，最否己付款，是否未发货
<font color=red>行 161:                    BllOrderInfoTable model = GetModel(orderId);
</font>行 162:                    if (true)
行 163:                    {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  161
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.4fdb33tz.15.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,47): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,56): error CS1503: 参数“1”: 无法从“string”转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 1002:                 cmd.Parameters.Clear();行 1003:                 return myReader;行 1004:             }行 1005:             catch (System.Data.SqlClient.SqlException e)行 1006:             {行 1007:                 throw e;行 1008:             }行 1009: 行 1010:         }行 1011: 行 1012:         /// <summary>行 1013:         /// 执行查询语句，返回DataSet行 1014:         /// </summary>行 1015:         /// <param name="SQLString">查询语句</param>行 1016:         /// <returns>DataSet</returns>行 1017:         public static DataSet Query(string SQLString, params SqlParameter[] cmdParms)行 1018:         {行 1019:      
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:20:13,256 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.e-5ufuq_.23.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,47): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,56): error CS1503: 参数“1”: 无法从“string”转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = "";行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (!currentOrderId.Equals(orderId))行 162:                          {行 163:                              if (currentOrderId == "")行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != "")行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                          }行 206:                          dt.Rows.Add(retDr);行 207:                      }行 208:                      ret = CConstant.SUCCESS;行 209:                  }行 210:              }行 211:              catch (Exception ex)行 212:              {行 213:                  ret = CConstant.ERROR;　//系统异常行 214:              }行 215:  行 216:              return ret + CCommon.DataSetToXml("order_info", dt);行 217:          }行 218:          #endregion行 219:  行 220:          #region 单张/多张订单的消息更新行 221:          /// <summary>行 222:          /// 单张/多张订单的消息更新行 223:          /// </summary>行 224:          /// <param name="type"></param>行 225:          /// <param name="values"></param>行 226:          /// <param name="time"></param>行 227:          /// <param name="keys"></param>行 228:          /// <returns></returns>行 229:          [WebMethod]行 230:          public string ReceiveMessage(string type, string values, string time, string keys)行 231:          {行 232:              string ret = "";行 233:  行 234:              try行 235:              {行 236:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 237:                  {行 238:                      ret = CConstant.NO_DATA;行 239:                  }行 240:                  else行 241:                  {行 242:                      switch (type)行 243:                      {行 244:                          case "single":行 245:                              break;行 246:                          case "list":行 247:                              break;行 248:                      }行 249:                  }行 250:              }行 251:              catch (Exception ex)行 252:              {行 253:                  ret = CConstant.ERROR;　//系统异常行 254:              }行 255:              return ret;行 256:          }行 257:          #endregion行 258:  行 259:      } //end class行 260:  }行 261:  行 262:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:20:34,097 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.b_dyzn2r.14.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,47): error CS1502: 与“CZZD.GSZX.DAL.BllOrderInfoManage.GetModel(int)”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(161,56): error CS1503: 参数“1”: 无法从“string”转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = "";行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (!currentOrderId.Equals(orderId))行 162:                          {行 163:                              if (currentOrderId == "")行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != "")行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                          }行 206:                          dt.Rows.Add(retDr);行 207:                      }行 208:                      ret = CConstant.SUCCESS;行 209:                  }行 210:              }行 211:              catch (Exception ex)行 212:              {行 213:                  ret = CConstant.ERROR;　//系统异常行 214:              }行 215:  行 216:              return ret + CCommon.DataSetToXml("order_info", dt);行 217:          }行 218:          #endregion行 219:  行 220:          #region 单张/多张订单的消息更新行 221:          /// <summary>行 222:          /// 单张/多张订单的消息更新行 223:          /// </summary>行 224:          /// <param name="type"></param>行 225:          /// <param name="values"></param>行 226:          /// <param name="time"></param>行 227:          /// <param name="keys"></param>行 228:          /// <returns></returns>行 229:          [WebMethod]行 230:          public string ReceiveMessage(string type, string values, string time, string keys)行 231:          {行 232:              string ret = "";行 233:  行 234:              try行 235:              {行 236:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 237:                  {行 238:                      ret = CConstant.NO_DATA;行 239:                  }行 240:                  else行 241:                  {行 242:                      switch (type)行 243:                      {行 244:                          case "single":行 245:                              break;行 246:                          case "list":行 247:                              break;行 248:                      }行 249:                  }行 250:              }行 251:              catch (Exception ex)行 252:              {行 253:                  ret = CConstant.ERROR;　//系统异常行 254:              }行 255:              return ret;行 256:          }行 257:          #endregion行 258:  行 259:      } //end class行 260:  }行 261:  行 262:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:20:55,016 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0103: 当前上下文中不存在名称“model”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 211:					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),
行 212:					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};
<font color=red>行 213:                        actionParams[0].Value = model.order_id;
</font>行 214:                        actionParams[1].Value = CConstant.DEFAULT_USER_CODE;
行 215:                        actionParams[2].Value = CConstant.ORDER_NORMAL;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  213
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.a3sgwroe.18.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(213,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(216,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(217,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(153,42): error CS0029: 无法将类型“string”隐式转换为“int”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 1002:                 cmd.Parameters.Clear();行 1003:                 return myReader;行 1004:             }行 1005:             catch (System.Data.SqlClient.SqlException e)行 1006:             {行 1007:                 throw e;行 1008:             }行 1009: 行 1010:         }行 1011: 行 1012:         /// <summary>行 1013:         /// 执行查询语句，返回DataSet行 1014:         /// </summary>行 1015:         /// <param name="SQLString">查询语句</param>
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:21:15,905 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0103: 当前上下文中不存在名称“model”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 211:					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),
行 212:					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};
<font color=red>行 213:                        actionParams[0].Value = model.order_id;
</font>行 214:                        actionParams[1].Value = CConstant.DEFAULT_USER_CODE;
行 215:                        actionParams[2].Value = CConstant.ORDER_NORMAL;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  213
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.nhxiax8b.28.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(213,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(216,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(217,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(163,33): error CS0019: 运算符“==”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(193,25): error CS0019: 运算符“!=”无法应用于“int”和“string”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 1002:                 cmd.Parameters.Clear();行 1003:                 return myReader;行 1004:             }行 1005:             catch (System.Data.SqlClient.SqlException e)行 1006:             {行 1007:                 throw e;行 1008:             }行 1009: 行 1010:         }行 1011: 行 1012:         /// <summary>行 1013:         /// 执行查询语句，返回DataSet行 1014:         /// </summary>行 1015:         /// <param name="SQLString">查询语句</param>行 1016:         /// <returns>DataSet</returns>行 1017:         public static DataSet Query(string SQLString, params SqlPara
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:21:36,825 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0103: 当前上下文中不存在名称“model”<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 211:					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),
行 212:					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};
<font color=red>行 213:                        actionParams[0].Value = model.order_id;
</font>行 214:                        actionParams[1].Value = CConstant.DEFAULT_USER_CODE;
行 215:                        actionParams[2].Value = CConstant.ORDER_NORMAL;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  213
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 200:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);
行 201:                        }
<font color=red>行 202:                        catch (Exception ex)
</font>行 203:                        {
行 204:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 209:                }
行 210:            }
<font color=red>行 211:            catch (Exception ex)
</font>行 212:            {
行 213:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.dluqg-o5.26.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(213,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(216,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(217,49): error CS0103: 当前上下文中不存在名称“model”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(202,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(211,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:21:57,729 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 200:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);
行 201:                        }
<font color=red>行 202:                        catch (Exception ex)
</font>行 203:                        {
行 204:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 209:                }
行 210:            }
<font color=red>行 211:            catch (Exception ex)
</font>行 212:            {
行 213:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.hodgbsb5.27.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(202,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(211,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(296,40): error CS0103: 当前上下文中不存在名称“actual_amount”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = 0;行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (!currentOrderId.Equals(orderId))行 162:                          {行 163:                              if (currentOrderId == 0)行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != 0)行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                          }行 206:                          dt.Rows.Add(retDr);行 207:                      }行 208:                      ret = CConstant.SUCCESS;行 209:                  }行 210:              }行 211:              catch (Exception ex)行 212:              {行 213:                  ret = CConstant.ERROR;　//系统异常行 214:              }行 215:  行 216:              return ret + CCommon.DataSetToXml("order_info", dt);行 217:          }行 218:          #endregion行 219:  行 220:          #region 单张/多张订单的消息更新行 221:          /// <summary>行 222:          /// 单张/多张订单的消息更新行 223:          /// </summary>行 224:          /// <param name="type"></param>行 225:          /// <param name="values"></param>行 226:          /// <param name="time"></param>行 227:          /// <param name="keys"></param>行 228:          /// <returns></returns>行 229:          [WebMethod]行 230:          public string ReceiveMessage(string type, string values, string time, string keys)行 231:          {行 232:              string ret = "";行 233:  行 234:              try行 235:              {行 236:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 237:                  {行 238:                      ret = CConstant.NO_DATA;行 239:                  }行 240:                  else行 241:                  {行 242:                      switch (type)行 243:                      {行 244:                          case "single":行 245:                              break;行 246:                          case "list":行 247:                              break;行 248:                      }行 249:                  }行 250:              }行 251:              catch (Exception ex)行 252:              {行 253:                  ret = CConstant.ERROR;　//系统异常行 254:              }行 255:              return ret;行 256:          }行 257:          #endregion行 258:  行 259:      } //end class行 260:  }行 261:  行 262:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:22:19,662 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 200:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);
行 201:                        }
<font color=red>行 202:                        catch (Exception ex)
</font>行 203:                        {
行 204:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 209:                }
行 210:            }
<font color=red>行 211:            catch (Exception ex)
</font>行 212:            {
行 213:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kp1l1gtd.9.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(202,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(211,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           #region 单张订单实际金额，实际重量及账户余额的更新行 92:           /// <summary>行 93:           /// 单张订单实际金额，实际重量及账户余额的更新行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="orderIDs"></param>行 97:           /// <param name="values"></param>行 98:           /// <param name="time"></param>行 99:           /// <param name="keys"></param>行 100:          /// <returns></returns>行 101:          [WebMethod]行 102:          public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          {行 104:              string ret = CConstant.CONN_ERROR;行 105:  行 106:              try行 107:              {行 108:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:                  {行 110:                      ret = CConstant.CONN_ERROR;行 111:                  }行 112:                  else行 113:                  {行 114:                      BBllOrderInfo bll = new BBllOrderInfo();行 115:                      ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:                  }行 117:              }行 118:              catch (Exception ex)行 119:              {行 120:                  ret = CConstant.ERROR;　//系统异常行 121:              }行 122:              return ret;行 123:          }行 124:          #endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = 0;行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (!currentOrderId.Equals(orderId))行 162:                          {行 163:                              if (currentOrderId == 0)行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != 0)行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                          }行 206:                          dt.Rows.Add(retDr);行 207:                      }行 208:                      ret = CConstant.SUCCESS;行 209:                  }行 210:              }行 211:              catch (Exception ex)行 212:              {行 213:                  ret = CConstant.ERROR;　//系统异常行 214:              }行 215:  行 216:              return ret + CCommon.DataSetToXml("order_info", dt);行 217:          }行 218:          #endregion行 219:  行 220:          #region 单张/多张订单的消息更新行 221:          /// <summary>行 222:          /// 单张/多张订单的消息更新行 223:          /// </summary>行 224:          /// <param name="type"></param>行 225:          /// <param name="values"></param>行 226:          /// <param name="time"></param>行 227:          /// <param name="keys"></param>行 228:          /// <returns></returns>行 229:          [WebMethod]行 230:          public string ReceiveMessage(string type, string values, string time, string keys)行 231:          {行 232:              string ret = "";行 233:  行 234:              try行 235:              {行 236:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 237:                  {行 238:                      ret = CConstant.NO_DATA;行 239:                  }行 240:                  else行 241:                  {行 242:                      switch (type)行 243:                      {行 244:                          case "single":行 245:                              break;行 246:                          case "list":行 247:                              break;行 248:                      }行 249:                  }行 250:              }行 251:              catch (Exception ex)行 252:              {行 253:                  ret = CConstant.ERROR;　//系统异常行 254:              }行 255:              return ret;行 256:          }行 257:          #endregion行 258:  行 259:      } //end class行 260:  }行 261:  行 262:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:22:40,551 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 200:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);
行 201:                        }
<font color=red>行 202:                        catch (Exception ex)
</font>行 203:                        {
行 204:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 209:                }
行 210:            }
<font color=red>行 211:            catch (Exception ex)
</font>行 212:            {
行 213:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.6ifexjhz.17.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(202,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(211,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 9
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:23:01,439 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 200:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);
行 201:                        }
<font color=red>行 202:                        catch (Exception ex)
</font>行 203:                        {
行 204:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 209:                }
行 210:            }
<font color=red>行 211:            catch (Exception ex)
</font>行 212:            {
行 213:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.ypdvs2jt.23.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(202,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(211,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(CConvert.ToInt32(orderId));行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, int orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.Append("actual_number=@actual_number,");行 288:                  strSql.Append("actual_amount=@actual_amount");行 289:                  strSql.Append(" where rec_id=@rec_id");行 290:                  MySqlParameter[] goodsParams = {行 291:  					new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:  					new MySqlParameter("@act_number", MySqlDbType.Decimal,10),行 293:                      new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  goodsParams[0].Value = recId;行 295:                  goodsParams[1].Value = actualNumber;行 296:                  goodsParams[2].Value = actualAmount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单[" + orderSn + "]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(int orderId)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = orderId;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:23:22,328 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 113:                {
行 114:                    BBllOrderInfo bll = new BBllOrderInfo();
<font color=red>行 115:                    ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);
</font>行 116:                }
行 117:            }</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs
            ?? <b>行:</b>  115
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 200:                            retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);
行 201:                        }
<font color=red>行 202:                        catch (Exception ex)
</font>行 203:                        {
行 204:                            retDr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 209:                }
行 210:            }
<font color=red>行 211:            catch (Exception ex)
</font>行 212:            {
行 213:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 249:                }
行 250:            }
<font color=red>行 251:            catch (Exception ex)
</font>行 252:            {
行 253:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.auzwchoe.24.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(115,27): error CS1501: “ReceiveOrderInfo”方法没有采用“4”个参数的重载
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Bll\BBllOrderInfo.cs(56,23): (与前一个错误相关的符号位置)
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(202,42): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(211,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(251,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 9
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:23:56,460 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:25:03,993 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:25:27,097 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:25:49,264 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:26:32,383 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:26:55,471 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:27:16,156 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:28:09,711 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:28:30,685 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:28:51,651 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:29:14,615 [14][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:29:35,628 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:29:57,671 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:31:58,404 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]送信连接失败。
System.Net.WebException: 操作超时
   在 System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.ReceiveOrderInfos(String type, String xmlData, String time, String keys) 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 194
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 136
2013-11-01 16:32:52,479 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:33:13,507 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:33:34,552 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:33:55,581 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:34:16,734 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:34:39,152 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:35:00,196 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:35:21,225 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:35:42,269 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:36:03,298 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:36:24,330 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:36:46,388 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:37:07,417 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:37:28,446 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:37:49,475 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:38:10,504 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:38:31,532 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:38:53,606 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:39:14,651 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:39:35,680 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:39:58,674 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:40:19,703 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:40:42,697 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:41:05,551 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0839: 缺少参数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 286:                strSql.Append("update ecs_order_goods set ");
行 287:                strSql.AppendFormat("actual_number= {0},", actualNumber);
<font color=red>行 288:                strSql.AppendFormat("actual_amount= {0} ",);
</font>行 289:                strSql.AppendFormat(" where rec_id=@rec_id");
行 290:                MySqlParameter[] goodsParams = {</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  288
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 210:                }
行 211:            }
<font color=red>行 212:            catch (Exception ex)
</font>行 213:            {
行 214:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 250:                }
行 251:            }
<font color=red>行 252:            catch (Exception ex)
</font>行 253:            {
行 254:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s4pnt4jo.16.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(288,59): error CS0839: 缺少参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(212,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(252,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 1002:                 cmd.Parameters.Clear();行 1003:                 return myReader;行 1004:             }行 1005:             catch (S
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.ReceiveOrderInfos(String type, String xmlData, String time, String keys) 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 194
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 136
2013-11-01 16:41:28,795 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:41:51,010 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:42:11,930 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1586: 数组创建必须有数组大小或数组初始值设定项<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 295:                //goodsParams[1].Value = actualNumber;
行 296:                //goodsParams[2].Value = actualAmount;
<font color=red>行 297:                sqlList.Add(new MySqlCommandInfo(strSql.ToString(), new MySqlParameter[]));
</font>行 298:            }
行 299:</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  297
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 210:                }
行 211:            }
<font color=red>行 212:            catch (Exception ex)
</font>行 213:            {
行 214:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 250:                }
行 251:            }
<font color=red>行 252:            catch (Exception ex)
</font>行 253:            {
行 254:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.s2ehxy-k.27.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(212,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(252,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(297,87): error CS1586: 数组创建必须有数组大小或数组初始值设定项
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 1002:                 cmd.Parameters.Clear();行 1003:                 return myReader;行 1004:             }行 1005:             catch (System.Data.SqlClient.SqlException e
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:42:32,834 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS1502: 与“CZZD.GSZX.DBUtility.MySqlCommandInfo.MySqlCommandInfo(string, MySql.Data.MySqlClient.MySqlParameter[])”最匹配的重载方法具有一些无效参数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 295:                //goodsParams[1].Value = actualNumber;
行 296:                //goodsParams[2].Value = actualAmount;
<font color=red>行 297:                sqlList.Add(new MySqlCommandInfo(strSql.ToString(), new MySqlParameter()));
</font>行 298:            }
行 299:</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  297
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 210:                }
行 211:            }
<font color=red>行 212:            catch (Exception ex)
</font>行 213:            {
行 214:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 250:                }
行 251:            }
<font color=red>行 252:            catch (Exception ex)
</font>行 253:            {
行 254:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kn-_15wc.22.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(297,29): error CS1502: 与“CZZD.GSZX.DBUtility.MySqlCommandInfo.MySqlCommandInfo(string, MySql.Data.MySqlClient.MySqlParameter[])”最匹配的重载方法具有一些无效参数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(297,69): error CS1503: 参数“2”: 无法从“MySql.Data.MySqlClient.MySqlParameter”转换为“MySql.Data.MySqlClient.MySqlParameter[]”
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(212,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(252,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(CConvert.ToInt32(orderId));行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, int orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.AppendFormat("actual_number= {0},", actualNumber);行 288:                  strSql.AppendFormat("actual_amount= {0} ", actualAmount);行 289:                  strSql.AppendFormat(" where rec_id= {0} ", recId);行 290:                  //MySqlParameter[] goodsParams = {行 291:                  //    new MySqlParameter("@rec_id", MySqlDbType.Int32),					行 292:                  //    new MySqlParameter("@actual_number", MySqlDbType.Decimal,10),行 293:                  //    new MySqlParameter("@actual_amount", MySqlDbType.Decimal,10)};行 294:                  //goodsParams[0].Value = recId;行 295:                  //goodsParams[1].Value = actualNumber;行 296:                  //goodsParams[2].Value = actualAmount;行 297:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), new MySqlParameter()));行 298:              }行 299:  行 300:              //帐户余额更新行 301:              strSql = new StringBuilder();行 302:              strSql.Append("update ecs_users set ");行 303:              strSql.Append("user_money=user_money+@user_money");行 304:              strSql.Append(" where user_id=@user_id");行 305:              MySqlParameter[] userParams = {行 306:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 307:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 308:  					};行 309:              userParams[0].Value = model.user_id;行 310:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 311:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 312:  行 313:              //账户余额变动记录行 314:              strSql = new StringBuilder();行 315:              strSql.Append("insert into ecs_account_log(");行 316:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 317:              strSql.Append(" values (");行 318:              strSql.Append("@user_id,@user_money,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 319:              MySqlParameter[] accountlogParams = {行 320:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 321:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10),行 322:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 323:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 324:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 325:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 326:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 327:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 328:              accountlogParams[0].Value = model.user_id;行 329:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 330:              accountlogParams[2].Value = 0;行 331:              accountlogParams[3].Value = 0;行 332:              accountlogParams[4].Value = 0;行 333:              accountlogParams[5].Value = logTime;行 334:              accountlogParams[6].Value = "差额退款，订单[" + orderSn + "]";行 335:              accountlogParams[7].Value = 99;行 336:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 337:  行 338:              //执行行 339:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 340:              {行 341:                  ret = CConstant.SUCCESS;行 342:              }行 343:              else行 344:              {行 345:                  ret = CConstant.ERROR;行 346:              }行 347:              return ret;行 348:          }行 349:          #endregion行 350:  行 351:  行 352:          #region   得到一个对象实体行 353:          /// <summary>行 354:          /// 得到一个对象实体行 355:          /// </summary>行 356:          public BllOrderInfoTable GetModel(int orderId)行 357:          {行 358:  行 359:              StringBuilder strSql = new StringBuilder();行 360:              strSql.Append("select * from ecs_order_info ");行 361:              strSql.Append(" where order_id=@order_id");行 362:              MySqlParameter[] parameters = {行 363:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 364:              };行 365:              parameters[0].Value = orderId;行 366:  行 367:              BllOrderInfoTable model = new BllOrderInfoTable();行 368:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 369:              if (ds.Tables[0].Rows.Count > 0)行 370:              {行 371:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 372:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 373:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 374:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 375:                  {行 376:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 377:                  }行 378:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 379:                  {行 380:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 381:                  }行 382:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 383:                  {行 384:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 385:                  }行 386:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 387:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 388:                  {行 389:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 390:                  }行 391:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 392:                  {行 393:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 396:                  {行 397:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 400:                  {行 401:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 402:                  }行 403:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 404:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 405:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 406:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 407:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 408:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 409:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 410:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 411:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 412:                  {行 413:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 414:                  }行 415:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 416:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 417:                  {行 418:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 419:                  }行 420:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 421:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 422:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 423:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 424:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 425:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 426:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 427:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 429:                  {行 430:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 431:                  }行 432:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 433:                  {行 434:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 435:                  }行 436:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 437:                  {行 438:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 439:                  }行 440:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 441:                  {行 442:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 443:                  }行 444:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 445:                  {行 446:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 447:                  }行 448:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 449:                  {行 450:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 451:                  }行 452:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 453:                  {行 454:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 455:                  }行 456:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 457:                  {行 458:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 459:                  }行 460:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 461:                  {行 462:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 463:                  }行 464:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 465:                  {行 466:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 467:                  }行 468:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 469:                  {行 470:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 471:                  }行 472:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 473:                  {行 474:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 475:                  }行 476:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 477:                  {行 478:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 479:                  }行 480:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 481:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 482:                  {行 483:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 486:                  {行 487:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 490:                  {行 491:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 494:                  {行 495:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 496:                  }行 497:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 498:                  {行 499:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 500:                  }行 501:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 502:                  {行 503:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 504:                  }行 505:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 506:                  {行 507:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 508:                  }行 509:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 510:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 511:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 512:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 513:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 514:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 515:                  {行 516:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 517:                  }行 518:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 519:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 520:                  {行 521:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 522:                  }行 523:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 524:                  //{行 525:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 526:                  //}行 527:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 528:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 529:                  {行 530:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 531:                  }行 532:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 533:                  {行 534:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 535:                  }行 536:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 537:                  {行 538:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 539:                  }行 540:                  return model;行 541:              }行 542:              else行 543:              {行 544:                  return null;行 545:              }行 546:          }行 547:          #endregion行 548:  行 549:  行 550:  行 551:      }//end class行 552:  }行 553:  行 554:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(297): error CS1502: 与“CZZD.GSZX.DBUtility.MySqlCommandInfo.MySqlCommandInfo(string, MySql.Data.MySqlClient.MySqlParameter[])”最匹配的重载方法具有一些无效参数
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(297): error CS1502: 与“CZZD.GSZX.DBUtility.MySqlCommandInfo.MySqlCommandInfo(string, MySql.Data.MySqlClient.MySqlParameter[])”最匹配的重载方法具有一些无效参数
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 16:42:57,326 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:43:20,585 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:43:59,835 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:44:21,940 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:44:52,922 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:45:36,651 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:46:03,476 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:46:25,565 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:46:46,572 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:47:07,562 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:47:28,578 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:47:49,607 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:48:10,571 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:48:32,650 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:48:59,359 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:49:31,265 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:49:52,403 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:50:15,733 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:51:03,910 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信失败。
2013-11-01 16:51:29,100 [14][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信成功。
2013-11-01 16:51:50,286 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信成功。
2013-11-01 16:52:11,471 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信成功。
2013-11-01 16:53:49,951 [9][INFO ][M] - System start.
2013-11-01 16:53:51,792 [9][INFO ][M] - 服务 [订单拣货详细数据送信] －－－－启动
2013-11-01 16:54:13,944 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信成功。
2013-11-01 16:55:00,136 [9][INFO ][M] - System start.
2013-11-01 16:55:01,602 [9][INFO ][M] - 服务 [订单拣货详细数据送信] －－－－启动
2013-11-01 17:09:25,119 [15][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 311:            actionParams[3].Value = model.shipping_status;
行 312:            actionParams[4].Value = model.pay_status;
<font color=red>行 313:            actionParams[5].Value = "订单拣货完成，差额退款：" + model.goods_amount - Convert.ToDecimal(actualGoodsAmount);
</font>行 314:            actionParams[6].Value = logTime;
行 315:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  313
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 210:                }
行 211:            }
<font color=red>行 212:            catch (Exception ex)
</font>行 213:            {
行 214:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 250:                }
行 251:            }
<font color=red>行 252:            catch (Exception ex)
</font>行 253:            {
行 254:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.9bmp461b.26.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313,37): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(212,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(252,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections.Generic;行 3:    using System.Linq;行 4:    using System.Text;行 5:    using System.Data.Common;行 6:    using System.Collections;行 7:    using System.Data;行 8:    using System.Reflection;行 9:    using System.Data.SqlClient;行 10:   行 11:   namespace CZZD.GSZX.DBUtility行 12:   {行 13:       public class SqlDBHelper行 14:       {行 15:          //数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.		行 16:           public static string connectionString = PubConstant.GetSqlServerConnectionString();行 17:           public SqlDBHelper()行 18:           {            行 19:           }行 20:   行 21:           #region 公用方法行 22:           /// <summary>行 23:           /// 判断是否存在某表的某个字段行 24:           /// </summary>行 25:           /// <param name="tableName">表名称</param>行 26:           /// <param name="columnName">列名称</param>行 27:           /// <returns>是否存在</returns>行 28:           public static bool ColumnExists(string tableName, string columnName)行 29:           {行 30:               string sql = "select count(1) from syscolumns where [id]=object_id('" + tableName + "') and [name]='" + columnName + "'";行 31:               object res = GetSingle(sql);行 32:               if (res == null)行 33:               {行 34:                   return false;行 35:               }行 36:               return Convert.ToInt32(res) > 0;行 37:           }行 38:           public static int GetMaxID(string FieldName, string TableName)行 39:           {行 40:               string strsql = "select max(" + FieldName + ")+1 from " + TableName;行 41:               object obj = SqlDBHelper.GetSingle(strsql);行 42:               if (obj == null)行 43:               {行 44:                   return 1;行 45:               }行 46:               else行 47:               {行 48:                   return int.Parse(obj.ToString());行 49:               }行 50:           }行 51:           public static bool Exists(string strSql)行 52:           {行 53:               object obj = SqlDBHelper.GetSingle(strSql);行 54:               int cmdresult;行 55:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 56:               {行 57:                   cmdresult = 0;行 58:               }行 59:               else行 60:               {行 61:                   cmdresult = int.Parse(obj.ToString());行 62:               }行 63:               if (cmdresult == 0)行 64:               {行 65:                   return false;行 66:               }行 67:               else行 68:               {行 69:                   return true;行 70:               }行 71:           }行 72:           /// <summary>行 73:           /// 表是否存在行 74:           /// </summary>行 75:           /// <param name="TableName"></param>行 76:           /// <returns></returns>行 77:           public static bool TabExists(string TableName)行 78:           {行 79:               string strsql = "select count(*) from sysobjects where id = object_id(N'[" + TableName + "]') and OBJECTPROPERTY(id, N'IsUserTable') = 1";行 80:               //string strsql = "SELECT count(*) FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[" + TableName + "]') AND type in (N'U')";行 81:               object obj = SqlDBHelper.GetSingle(strsql);行 82:               int cmdresult;行 83:               if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 84:               {行 85:                   cmdresult = 0;行 86:               }行 87:               else行 88:               {行 89:                   cmdresult = int.Parse(obj.ToString());行 90:               }行 91:               if (cmdresult == 0)行 92:               {行 93:                   return false;行 94:               }行 95:               else行 96:               {行 97:                   return true;行 98:               }行 99:           }行 100:          public static bool Exists(string strSql, params SqlParameter[] cmdParms)行 101:          {行 102:              object obj = SqlDBHelper.GetSingle(strSql, cmdParms);行 103:              int cmdresult;行 104:              if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 105:              {行 106:                  cmdresult = 0;行 107:              }行 108:              else行 109:              {行 110:                  cmdresult = int.Parse(obj.ToString());行 111:              }行 112:              if (cmdresult == 0)行 113:              {行 114:                  return false;行 115:              }行 116:              else行 117:              {行 118:                  return true;行 119:              }行 120:          }行 121:  行 122:          public static int ExecuteSql(string SQLString)行 123:          {行 124:              using (SqlConnection connection = new SqlConnection(connectionString))行 125:              {行 126:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 127:                  {行 128:                      try行 129:                      {行 130:                          connection.Open();行 131:                          int rows = cmd.ExecuteNonQuery();行 132:                          return rows;行 133:                      }行 134:                      catch (System.Data.SqlClient.SqlException e)行 135:                      {行 136:                          connection.Close();行 137:                          throw e;行 138:                      }行 139:                      finally行 140:                      {行 141:                          cmd.Dispose();行 142:                          connection.Close();行 143:                      }行 144:                  }行 145:              }行 146:          }行 147:  行 148:          #endregion行 149:  行 150:          #region  执行简单SQL语句行 151:  行 152:          /// <summary>行 153:          /// 执行SQL语句，返回影响的记录数行 154:          /// </summary>行 155:          /// <param name="SQLString">SQL语句</param>行 156:          /// <returns>影响的记录数</returns>行 157:          public static string ExecuteSqlScalar(string SQLString)行 158:          {行 159:              string rStr = "";行 160:              using (SqlConnection connection = new SqlConnection(connectionString))行 161:              {行 162:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 163:                  {行 164:                      try行 165:                      {行 166:                          connection.Open();行 167:                          rStr = cmd.ExecuteScalar().ToString();行 168:                      }行 169:                      catch (System.Data.SqlClient.SqlException e)行 170:                      {行 171:                          connection.Close();行 172:                          throw e;行 173:                      }行 174:                      finally行 175:                      {行 176:                          cmd.Dispose();                    行 177:                          connection.Close();行 178:                      }行 179:                  }行 180:              }行 181:              return rStr;行 182:          }行 183:  行 184:          public static int ExecuteSqlByTime(string SQLString, int Times)行 185:          {行 186:              using (SqlConnection connection = new SqlConnection(connectionString))行 187:              {行 188:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 189:                  {行 190:                      try行 191:                      {行 192:                          connection.Open();行 193:                          cmd.CommandTimeout = Times;行 194:                          int rows = cmd.ExecuteNonQuery();行 195:                          return rows;行 196:                      }行 197:                      catch (System.Data.SqlClient.SqlException e)行 198:                      {行 199:                          connection.Close();行 200:                          throw e;行 201:                      }行 202:                      finally行 203:                      {行 204:                          cmd.Dispose();行 205:                          connection.Close();行 206:                      }行 207:                  }行 208:              }行 209:          }行 210:        行 211:          /// <summary>行 212:          /// 执行Sql和Oracle滴混合事务行 213:          /// </summary>行 214:          /// <param name="list">SQL命令行列表</param>行 215:          /// <param name="oracleCmdSqlList">Oracle命令行列表</param>行 216:          /// <returns>执行结果 0-由于SQL造成事务失败 -1 由于Oracle造成事务失败 1-整体事务执行成功</returns>行 217:          public static int ExecuteSqlTran(List<CommandInfo> list, List<CommandInfo> oracleCmdSqlList)行 218:          {行 219:              using (SqlConnection conn = new SqlConnection(connectionString))行 220:              {行 221:                  conn.Open();行 222:                  SqlCommand cmd = new SqlCommand();行 223:                  cmd.Connection = conn;行 224:                  SqlTransaction tx = conn.BeginTransaction();行 225:                  cmd.Transaction = tx;行 226:                  try行 227:                  {行 228:                      foreach (CommandInfo myDE in list)行 229:                      {行 230:                          string cmdText = myDE.CommandText;行 231:                          SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 232:                          PrepareCommand(cmd, conn, tx, cmdText, cmdParms);行 233:                          if (myDE.EffentNextType == EffentNextType.SolicitationEvent)行 234:                          {行 235:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 236:                              {行 237:                                  tx.Rollback();行 238:                                  throw new Exception("违背要求"+myDE.CommandText+"必须符合select count(..的格式");行 239:                                  //return 0;行 240:                              }行 241:  行 242:                              object obj = cmd.ExecuteScalar();行 243:                              bool isHave = false;行 244:                              if (obj == null && obj == DBNull.Value)行 245:                              {行 246:                                  isHave = false;行 247:                              }行 248:                              isHave = Convert.ToInt32(obj) > 0;行 249:                              if (isHave)行 250:                              {行 251:                                  //引发事件行 252:                                  myDE.OnSolicitationEvent();行 253:                              }行 254:                          }行 255:                          if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 256:                          {行 257:                              if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 258:                              {行 259:                                  tx.Rollback();行 260:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "必须符合select count(..的格式");行 261:                                  //return 0;行 262:                              }行 263:  行 264:                              object obj = cmd.ExecuteScalar();行 265:                              bool isHave = false;行 266:                              if (obj == null && obj == DBNull.Value)行 267:                              {行 268:                                  isHave = false;行 269:                              }行 270:                              isHave = Convert.ToInt32(obj) > 0;行 271:  行 272:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 273:                              {行 274:                                  tx.Rollback();行 275:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须大于0");行 276:                                  //return 0;行 277:                              }行 278:                              if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 279:                              {行 280:                                  tx.Rollback();行 281:                                  throw new Exception("SQL:违背要求" + myDE.CommandText + "返回值必须等于0");行 282:                                  //return 0;行 283:                              }行 284:                              continue;行 285:                          }行 286:                          int val = cmd.ExecuteNonQuery();行 287:                          if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 288:                          {行 289:                              tx.Rollback();行 290:                              throw new Exception("SQL:违背要求" + myDE.CommandText + "必须有影响行");行 291:                              //return 0;行 292:                          }行 293:                          cmd.Parameters.Clear();行 294:                      }行 295:                      //string oraConnectionString = PubConstant.GetConnectionString("ConnectionStringPPC");行 296:                      //bool res = OracleHelper.ExecuteSqlTran(oraConnectionString, oracleCmdSqlList);行 297:                      //if (!res)行 298:                      //{行 299:                      //    tx.Rollback();行 300:                      //    throw new Exception("Oracle执行失败");行 301:                      //    // return -1;行 302:                      //}行 303:                      tx.Commit();行 304:                      return 1;行 305:                  }行 306:                  catch (System.Data.SqlClient.SqlException e)行 307:                  {行 308:                      tx.Rollback();行 309:                      throw e;行 310:                  }行 311:                  catch (Exception e)行 312:                  {行 313:                      tx.Rollback();行 314:                      throw e;行 315:                  }行 316:              }行 317:          }        行 318:          /// <summary>行 319:          /// 执行多条SQL语句，实现数据库事务。行 320:          /// </summary>行 321:          /// <param name="SQLStringList">多条SQL语句</param>		行 322:          public static int ExecuteSqlTran(List<String> SQLStringList)行 323:          {行 324:              using (SqlConnection connection = new SqlConnection(connectionString))行 325:              {行 326:                  connection.Open();行 327:                  SqlCommand cmd = new SqlCommand();行 328:                  cmd.Connection = connection;行 329:                  SqlTransaction tx = connection.BeginTransaction();行 330:                  cmd.Transaction = tx;行 331:                  try行 332:                  {行 333:                      int count = 0;行 334:                      for (int n = 0; n < SQLStringList.Count; n++)行 335:                      {行 336:                          string strsql = SQLStringList[n];行 337:                          if (strsql.Trim().Length > 1)行 338:                          {行 339:                              cmd.CommandText = strsql;行 340:                              count += cmd.ExecuteNonQuery();行 341:                          }行 342:                      }行 343:                      tx.Commit();行 344:                      return count;行 345:                  }行 346:                  catch(Exception e)行 347:                  {行 348:                      tx.Rollback();行 349:                      return 0;行 350:                  }行 351:                  finally行 352:                  {行 353:                      cmd.Dispose();行 354:                      connection.Close();行 355:                  }行 356:              }行 357:          }行 358:  行 359:          /// <summary>行 360:          /// 执行多条SQL语句，实现数据库事务。行 361:          /// </summary>行 362:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的OracleParameter[]）</param>行 363:          public static int ExecuteSqlArrayTran(Dictionary<SqlParameter[], string> SQLStringList)行 364:          {行 365:              int val = 0;行 366:              using (SqlConnection conn = new SqlConnection(connectionString))行 367:              {行 368:                  conn.Open();行 369:                  using (SqlTransaction trans = conn.BeginTransaction())行 370:                  {行 371:                      SqlCommand cmd = new SqlCommand();行 372:                      try行 373:                      {行 374:                          //循环行 375:                          foreach (KeyValuePair<SqlParameter[], string> myDE in SQLStringList)行 376:                          {行 377:                              string cmdText = myDE.Value.ToString();行 378:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Key;行 379:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 380:                              val = cmd.ExecuteNonQuery();行 381:                              cmd.Parameters.Clear();行 382:                          }行 383:                          trans.Commit();行 384:                          val = 1;行 385:                      }行 386:                      catch (Exception ex)行 387:                      {行 388:                          trans.Rollback();行 389:                          val = 0;行 390:                          //throw;行 391:                      }行 392:                  }行 393:              }行 394:              return val;行 395:          }行 396:  行 397:          /// <summary>行 398:          /// 执行带一个存储过程参数的的SQL语句。行 399:          /// </summary>行 400:          /// <param name="SQLString">SQL语句</param>行 401:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 402:          /// <returns>影响的记录数</returns>行 403:          public static int ExecuteSql(string SQLString, string content)行 404:          {行 405:              using (SqlConnection connection = new SqlConnection(connectionString))行 406:              {行 407:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 408:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 409:                  myParameter.Value = content;行 410:                  cmd.Parameters.Add(myParameter);行 411:                  try行 412:                  {行 413:                      connection.Open();行 414:                      int rows = cmd.ExecuteNonQuery();行 415:                      return rows;行 416:                  }行 417:                  catch (System.Data.SqlClient.SqlException e)行 418:                  {行 419:                      throw e;行 420:                  }行 421:                  finally行 422:                  {行 423:                      cmd.Dispose();行 424:                      connection.Close();行 425:                  }行 426:              }行 427:          }行 428:          /// <summary>行 429:          /// 执行带一个存储过程参数的的SQL语句。行 430:          /// </summary>行 431:          /// <param name="SQLString">SQL语句</param>行 432:          /// <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>行 433:          /// <returns>影响的记录数</returns>行 434:          public static object ExecuteSqlGet(string SQLString, string content)行 435:          {行 436:              using (SqlConnection connection = new SqlConnection(connectionString))行 437:              {行 438:                  SqlCommand cmd = new SqlCommand(SQLString, connection);行 439:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@content", SqlDbType.NText);行 440:                  myParameter.Value = content;行 441:                  cmd.Parameters.Add(myParameter);行 442:                  try行 443:                  {行 444:                      connection.Open();行 445:                      object obj = cmd.ExecuteScalar();行 446:                      if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 447:                      {行 448:                          return null;行 449:                      }行 450:                      else行 451:                      {行 452:                          return obj;行 453:                      }行 454:                  }行 455:                  catch (System.Data.SqlClient.SqlException e)行 456:                  {行 457:                      throw e;行 458:                  }行 459:                  finally行 460:                  {行 461:                      cmd.Dispose();行 462:                      connection.Close();行 463:                  }行 464:              }行 465:          }行 466:          /// <summary>行 467:          /// 向数据库里插入图像格式的字段(和上面情况类似的另一种实例)行 468:          /// </summary>行 469:          /// <param name="strSQL">SQL语句</param>行 470:          /// <param name="fs">图像字节,数据库的字段类型为image的情况</param>行 471:          /// <returns>影响的记录数</returns>行 472:          public static int ExecuteSqlInsertImg(string strSQL, byte[] fs)行 473:          {行 474:              using (SqlConnection connection = new SqlConnection(connectionString))行 475:              {行 476:                  SqlCommand cmd = new SqlCommand(strSQL, connection);行 477:                  System.Data.SqlClient.SqlParameter myParameter = new System.Data.SqlClient.SqlParameter("@fs", SqlDbType.Image);行 478:                  myParameter.Value = fs;行 479:                  cmd.Parameters.Add(myParameter);行 480:                  try行 481:                  {行 482:                      connection.Open();行 483:                      int rows = cmd.ExecuteNonQuery();行 484:                      return rows;行 485:                  }行 486:                  catch (System.Data.SqlClient.SqlException e)行 487:                  {行 488:                      throw e;行 489:                  }行 490:                  finally行 491:                  {行 492:                      cmd.Dispose();行 493:                      connection.Close();行 494:                  }行 495:              }行 496:          }行 497:  行 498:          /// <summary>行 499:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 500:          /// </summary>行 501:          /// <param name="SQLString">计算查询结果语句</param>行 502:          /// <returns>查询结果（object）</returns>行 503:          public static object GetSingle(string SQLString)行 504:          {行 505:              using (SqlConnection connection = new SqlConnection(connectionString))行 506:              {行 507:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 508:                  {行 509:                      try行 510:                      {行 511:                          connection.Open();行 512:                          object obj = cmd.ExecuteScalar();行 513:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 514:                          {行 515:                              return null;行 516:                          }行 517:                          else行 518:                          {行 519:                              return obj;行 520:                          }行 521:                      }行 522:                      catch (System.Data.SqlClient.SqlException e)行 523:                      {行 524:                          connection.Close();行 525:                          throw e;行 526:                      }行 527:                      finally行 528:                      {行 529:                          cmd.Dispose();行 530:                          connection.Close();行 531:                      }行 532:                  }行 533:              }行 534:          }行 535:          public static object GetSingle(string SQLString, int Times)行 536:          {行 537:              using (SqlConnection connection = new SqlConnection(connectionString))行 538:              {行 539:                  using (SqlCommand cmd = new SqlCommand(SQLString, connection))行 540:                  {行 541:                      try行 542:                      {行 543:                          connection.Open();行 544:                          cmd.CommandTimeout = Times;行 545:                          object obj = cmd.ExecuteScalar();行 546:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 547:                          {行 548:                              return null;行 549:                          }行 550:                          else行 551:                          {行 552:                              return obj;行 553:                          }行 554:                      }行 555:                      catch (System.Data.SqlClient.SqlException e)行 556:                      {行 557:                          connection.Close();行 558:                          throw e;行 559:                      }行 560:                      finally行 561:                      {行 562:                          cmd.Dispose();行 563:                          connection.Close();行 564:                      }行 565:                  }行 566:              }行 567:          }行 568:          /// <summary>行 569:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 570:          /// </summary>行 571:          /// <param name="strSQL">查询语句</param>行 572:          /// <returns>SqlDataReader</returns>行 573:          public static SqlDataReader ExecuteReader(string strSQL)行 574:          {行 575:              SqlConnection connection = new SqlConnection(connectionString);行 576:              SqlCommand cmd = new SqlCommand(strSQL, connection);行 577:              try行 578:              {行 579:                  connection.Open();行 580:                  SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);行 581:                  return myReader;行 582:              }行 583:              catch (System.Data.SqlClient.SqlException e)行 584:              {行 585:                  throw e;行 586:              }   行 587:  行 588:  行 589:          }行 590:          /// <summary>行 591:          /// 执行查询语句，返回DataSet行 592:          /// </summary>行 593:          /// <param name="SQLString">查询语句</param>行 594:          /// <returns>DataSet</returns>行 595:          public static DataSet Query(string SQLString)行 596:          {行 597:              using (SqlConnection connection = new SqlConnection(connectionString))行 598:              {行 599:                  DataSet ds = new DataSet();行 600:                  try行 601:                  {行 602:                      connection.Open();行 603:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 604:                      command.Fill(ds, "ds");行 605:                  }行 606:                  catch (System.Data.SqlClient.SqlException ex)行 607:                  {行 608:                      throw new Exception(ex.Message);行 609:                  }行 610:                  finally行 611:                  {                    行 612:                      connection.Close();行 613:                  }行 614:                  return ds;行 615:              }行 616:          }行 617:          public static DataSet Query(string SQLString, int Times)行 618:          {行 619:              using (SqlConnection connection = new SqlConnection(connectionString))行 620:              {行 621:                  DataSet ds = new DataSet();行 622:                  try行 623:                  {行 624:                      connection.Open();行 625:                      SqlDataAdapter command = new SqlDataAdapter(SQLString, connection);行 626:                      command.SelectCommand.CommandTimeout = Times;行 627:                      command.Fill(ds, "ds");行 628:                  }行 629:                  catch (System.Data.SqlClient.SqlException ex)行 630:                  {行 631:                      throw new Exception(ex.Message);行 632:                  }行 633:                  finally行 634:                  {                    行 635:                      connection.Close();行 636:                  }行 637:                  return ds;行 638:              }行 639:          }行 640:  行 641:  行 642:  行 643:          #endregion行 644:  行 645:          #region 执行带参数的SQL语句行 646:  行 647:          /// <summary>行 648:          /// 执行SQL语句，返回影响的记录数行 649:          /// </summary>行 650:          /// <param name="SQLString">SQL语句</param>行 651:          /// <returns>影响的记录数</returns>行 652:          public static int ExecuteSql(string SQLString, params SqlParameter[] cmdParms)行 653:          {行 654:              using (SqlConnection connection = new SqlConnection(connectionString))行 655:              {行 656:                  using (SqlCommand cmd = new SqlCommand())行 657:                  {行 658:                      try行 659:                      {行 660:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 661:                          int rows = cmd.ExecuteNonQuery();行 662:                          cmd.Parameters.Clear();行 663:                          return rows;行 664:                      }行 665:                      catch (System.Data.SqlClient.SqlException e)行 666:                      {行 667:                          throw e;行 668:                      }行 669:                      finally行 670:                      {行 671:                          cmd.Dispose();行 672:                          connection.Close();行 673:                      }行 674:                  }行 675:              }行 676:          }行 677:  行 678:          /// <summary>行 679:          /// 执行SQL语句，返回影响的记录数行 680:          /// </summary>行 681:          /// <param name="SQLString">SQL语句</param>行 682:          /// <returns>影响的记录数</returns>行 683:          public static int ExecuteSqlScalar(string SQLString, params SqlParameter[] cmdParms)行 684:          {行 685:              using (SqlConnection connection = new SqlConnection(connectionString))行 686:              {行 687:                  using (SqlCommand cmd = new SqlCommand())行 688:                  {行 689:                      try行 690:                      {行 691:                          int rows = 0;行 692:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 693:                          object obj = cmd.ExecuteScalar();行 694:                          if (obj != null && obj != DBNull.Value)行 695:                          {行 696:                              rows = Convert.ToInt32(obj);行 697:                          }                        行 698:                          cmd.Parameters.Clear();行 699:                          return rows;行 700:                      }行 701:                      catch (System.Data.SqlClient.SqlException e)行 702:                      {行 703:                          throw e;行 704:                      }行 705:                      finally行 706:                      {行 707:                          cmd.Dispose();行 708:                          connection.Close();行 709:                      }行 710:                  }行 711:              }行 712:          }行 713:  行 714:  行 715:          /// <summary>行 716:          /// 执行存储过程，返回影响的行数		行 717:          /// </summary>行 718:          /// <param name="storedProcName">存储过程名</param>行 719:          /// <param name="parameters">存储过程参数</param>行 720:          /// <param name="rowsAffected">影响的行数</param>行 721:          /// <returns></returns>行 722:          public static string RunProcedureScalarStr(string storedProcName, IDataParameter[] parameters)行 723:          {行 724:              using (SqlConnection connection = new SqlConnection(connectionString))行 725:              {行 726:                  string result;行 727:                  connection.Open();行 728:                  SqlCommand command = new SqlCommand(storedProcName, connection);行 729:                  command.CommandType = CommandType.StoredProcedure;行 730:                  foreach (SqlParameter parameter in parameters)行 731:                  {行 732:                      if (parameter != null)行 733:                      {行 734:                          // 检查未分配值的输出参数,将其分配以DBNull.Value.行 735:                          if ((parameter.Direction == ParameterDirection.InputOutput || parameter.Direction == ParameterDirection.Input) &&行 736:                              (parameter.Value == null))行 737:                          {行 738:                              parameter.Value = DBNull.Value;行 739:                          }行 740:                          command.Parameters.Add(parameter);行 741:                      }行 742:  行 743:                  }行 744:                  result = Convert.ToString(command.ExecuteScalar());行 745:                  command.Dispose();行 746:                  connection.Dispose();行 747:                  connection.Close();行 748:                  return result;行 749:              }行 750:          }行 751:  行 752:  行 753:          /// <summary>行 754:          /// 执行多条SQL语句，实现数据库事务。行 755:          /// </summary>行 756:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 757:          public static void ExecuteSqlTran(Hashtable SQLStringList)行 758:          {行 759:              using (SqlConnection conn = new SqlConnection(connectionString))行 760:              {行 761:                  conn.Open();行 762:                  using (SqlTransaction trans = conn.BeginTransaction())行 763:                  {行 764:                      SqlCommand cmd = new SqlCommand();行 765:                      try行 766:                      {行 767:                          //循环行 768:                          foreach (DictionaryEntry myDE in SQLStringList)行 769:                          {行 770:                              string cmdText = myDE.Key.ToString();行 771:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 772:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 773:                              int val = cmd.ExecuteNonQuery();行 774:                              cmd.Parameters.Clear();行 775:                          }行 776:                          trans.Commit();行 777:                      }行 778:                      catch行 779:                      {行 780:                          trans.Rollback();行 781:                          throw;行 782:                      }行 783:                  }行 784:              }行 785:          }行 786:          /// <summary>行 787:          /// 执行多条SQL语句，实现数据库事务。行 788:          /// </summary>行 789:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 790:          public static int ExecuteSqlTran(System.Collections.Generic.List<CommandInfo> cmdList)行 791:          {行 792:              using (SqlConnection conn = new SqlConnection(connectionString))行 793:              {行 794:                  conn.Open();行 795:                  using (SqlTransaction trans = conn.BeginTransaction())行 796:                  {行 797:                      SqlCommand cmd = new SqlCommand();行 798:                      try行 799:                      { int count = 0;行 800:                          //循环行 801:                          foreach (CommandInfo myDE in cmdList)行 802:                          {行 803:                              string cmdText = myDE.CommandText;行 804:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 805:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 806:                             行 807:                              if (myDE.EffentNextType == EffentNextType.WhenHaveContine || myDE.EffentNextType == EffentNextType.WhenNoHaveContine)行 808:                              {行 809:                                  if (myDE.CommandText.ToLower().IndexOf("count(") == -1)行 810:                                  {行 811:                                      trans.Rollback();行 812:                                      return 0;行 813:                                  }行 814:  行 815:                                  object obj = cmd.ExecuteScalar();行 816:                                  bool isHave = false;行 817:                                  if (obj == null && obj == DBNull.Value)行 818:                                  {行 819:                                      isHave = false;行 820:                                  }行 821:                                  isHave = Convert.ToInt32(obj) > 0;行 822:  行 823:                                  if (myDE.EffentNextType == EffentNextType.WhenHaveContine && !isHave)行 824:                                  {行 825:                                      trans.Rollback();行 826:                                      return 0;行 827:                                  }行 828:                                  if (myDE.EffentNextType == EffentNextType.WhenNoHaveContine && isHave)行 829:                                  {行 830:                                      trans.Rollback();行 831:                                      return 0;行 832:                                  }行 833:                                  continue;行 834:                              }行 835:                              int val = cmd.ExecuteNonQuery();行 836:                              count += val;行 837:                              if (myDE.EffentNextType == EffentNextType.ExcuteEffectRows && val == 0)行 838:                              {行 839:                                  trans.Rollback();行 840:                                  return 0;行 841:                              }行 842:                              cmd.Parameters.Clear();行 843:                          }行 844:                          trans.Commit();行 845:                          return count;行 846:                      }行 847:                      catch行 848:                      {行 849:                          trans.Rollback();行 850:                          throw;行 851:                      }行 852:                  }行 853:              }行 854:          }行 855:          /// <summary>行 856:          /// 执行多条SQL语句，实现数据库事务。行 857:          /// </summary>行 858:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 859:          public static void ExecuteSqlTranWithIndentity(System.Collections.Generic.List<CommandInfo> SQLStringList)行 860:          {行 861:              using (SqlConnection conn = new SqlConnection(connectionString))行 862:              {行 863:                  conn.Open();行 864:                  using (SqlTransaction trans = conn.BeginTransaction())行 865:                  {行 866:                      SqlCommand cmd = new SqlCommand();行 867:                      try行 868:                      {行 869:                          int indentity = 0;行 870:                          //循环行 871:                          foreach (CommandInfo myDE in SQLStringList)行 872:                          {行 873:                              string cmdText = myDE.CommandText;行 874:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Parameters;行 875:                              foreach (SqlParameter q in cmdParms)行 876:                              {行 877:                                  if (q.Direction == ParameterDirection.InputOutput)行 878:                                  {行 879:                                      q.Value = indentity;行 880:                                  }行 881:                              }行 882:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 883:                              int val = cmd.ExecuteNonQuery();行 884:                              foreach (SqlParameter q in cmdParms)行 885:                              {行 886:                                  if (q.Direction == ParameterDirection.Output)行 887:                                  {行 888:                                      indentity = Convert.ToInt32(q.Value);行 889:                                  }行 890:                              }行 891:                              cmd.Parameters.Clear();行 892:                          }行 893:                          trans.Commit();行 894:                      }行 895:                      catch行 896:                      {行 897:                          trans.Rollback();行 898:                          throw;行 899:                      }行 900:                  }行 901:              }行 902:          }行 903:          /// <summary>行 904:          /// 执行多条SQL语句，实现数据库事务。行 905:          /// </summary>行 906:          /// <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>行 907:          public static void ExecuteSqlTranWithIndentity(Hashtable SQLStringList)行 908:          {行 909:              using (SqlConnection conn = new SqlConnection(connectionString))行 910:              {行 911:                  conn.Open();行 912:                  using (SqlTransaction trans = conn.BeginTransaction())行 913:                  {行 914:                      SqlCommand cmd = new SqlCommand();行 915:                      try行 916:                      {行 917:                          int indentity = 0;行 918:                          //循环行 919:                          foreach (DictionaryEntry myDE in SQLStringList)行 920:                          {行 921:                              string cmdText = myDE.Key.ToString();行 922:                              SqlParameter[] cmdParms = (SqlParameter[])myDE.Value;行 923:                              foreach (SqlParameter q in cmdParms)行 924:                              {行 925:                                  if (q.Direction == ParameterDirection.InputOutput)行 926:                                  {行 927:                                      q.Value = indentity;行 928:                                  }行 929:                              }行 930:                              PrepareCommand(cmd, conn, trans, cmdText, cmdParms);行 931:                              int val = cmd.ExecuteNonQuery();行 932:                              foreach (SqlParameter q in cmdParms)行 933:                              {行 934:                                  if (q.Direction == ParameterDirection.Output)行 935:                                  {行 936:                                      indentity = Convert.ToInt32(q.Value);行 937:                                  }行 938:                              }行 939:                              cmd.Parameters.Clear();行 940:                          }行 941:                          trans.Commit();行 942:                      }行 943:                      catch行 944:                      {行 945:                          trans.Rollback();行 946:                          throw;行 947:                      }行 948:                  }行 949:              }行 950:          }行 951:          /// <summary>行 952:          /// 执行一条计算查询结果语句，返回查询结果（object）。行 953:          /// </summary>行 954:          /// <param name="SQLString">计算查询结果语句</param>行 955:          /// <returns>查询结果（object）</returns>行 956:          public static object GetSingle(string SQLString, params SqlParameter[] cmdParms)行 957:          {行 958:              using (SqlConnection connection = new SqlConnection(connectionString))行 959:              {行 960:                  using (SqlCommand cmd = new SqlCommand())行 961:                  {行 962:                      try行 963:                      {行 964:                          PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 965:                          object obj = cmd.ExecuteScalar();行 966:                          cmd.Parameters.Clear();行 967:                          if ((Object.Equals(obj, null)) || (Object.Equals(obj, System.DBNull.Value)))行 968:                          {行 969:                              return null;行 970:                          }行 971:                          else行 972:                          {行 973:                              return obj;行 974:                          }行 975:                      }行 976:                      catch (System.Data.SqlClient.SqlException e)行 977:                      {行 978:                          throw e;行 979:                      }行 980:                      finally行 981:                      {行 982:                          cmd.Dispose();行 983:                          connection.Close();行 984:                      }行 985:                  }行 986:              }行 987:          }行 988:  行 989:          /// <summary>行 990:          /// 执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )行 991:          /// </summary>行 992:          /// <param name="strSQL">查询语句</param>行 993:          /// <returns>SqlDataReader</returns>行 994:          public static SqlDataReader ExecuteReader(string SQLString, params SqlParameter[] cmdParms)行 995:          {行 996:              SqlConnection connection = new SqlConnection(connectionString);行 997:              SqlCommand cmd = new SqlCommand();行 998:              try行 999:              {行 1000:                 PrepareCommand(cmd, connection, null, SQLString, cmdParms);行 1001:                 SqlDataReader myReader = cmd.ExecuteReader(CommandBehavior
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 17:09:46,116 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 311:            actionParams[3].Value = model.shipping_status;
行 312:            actionParams[4].Value = model.pay_status;
<font color=red>行 313:            actionParams[5].Value = "订单拣货完成，差额退款：" + model.goods_amount - Convert.ToDecimal(actualGoodsAmount);
</font>行 314:            actionParams[6].Value = logTime;
行 315:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  313
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 210:                }
行 211:            }
<font color=red>行 212:            catch (Exception ex)
</font>行 213:            {
行 214:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 250:                }
行 251:            }
<font color=red>行 252:            catch (Exception ex)
</font>行 253:            {
行 254:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.kvciuumq.1.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313,37): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(212,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(252,30): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(CConvert.ToInt32(orderId));行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, int orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.AppendFormat("actual_number= {0},", actualNumber);行 288:                  strSql.AppendFormat("actual_amount= {0} ", actualAmount);行 289:                  strSql.AppendFormat(" where rec_id= {0} ", recId);行 290:                  MySqlParameter[] goodsParams = { };行 291:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 292:              }行 293:  行 294:              //订单操作记录行 295:              strSql = new StringBuilder();行 296:              strSql.Append("insert into ecs_order_action(");行 297:              strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 298:              strSql.Append(" values (");行 299:              strSql.Append("@order_id_action,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 300:              MySqlParameter[] actionParams = {行 301:  					        new MySqlParameter("@order_id_action", MySqlDbType.Int32),行 302:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 303:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 304:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 305:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 306:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 307:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 308:              actionParams[0].Value = orderId;行 309:              actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 310:              actionParams[2].Value = model.order_status;行 311:              actionParams[3].Value = model.shipping_status;行 312:              actionParams[4].Value = model.pay_status;行 313:              actionParams[5].Value = "订单拣货完成，差额退款：" + model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 314:              actionParams[6].Value = logTime;行 315:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 316:  行 317:              //帐户余额更新行 318:              strSql = new StringBuilder();行 319:              strSql.Append("update ecs_users set ");行 320:              strSql.Append("user_money=user_money+@user_money");行 321:              strSql.Append(" where user_id=@user_id");行 322:              MySqlParameter[] userParams = {行 323:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 324:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 325:  					};行 326:              userParams[0].Value = model.user_id;行 327:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 328:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 329:  行 330:              //账户余额变动记录行 331:              strSql = new StringBuilder();行 332:              strSql.Append("insert into ecs_account_log(");行 333:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 334:              strSql.Append(" values (");行 335:              strSql.Append("@user_id_log,@user_money_log,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 336:              MySqlParameter[] accountlogParams = {行 337:  					new MySqlParameter("@user_id_log", MySqlDbType.Int32),行 338:  					new MySqlParameter("@user_money_log", MySqlDbType.Decimal,10),行 339:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 340:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 341:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 342:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 343:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 344:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 345:              accountlogParams[0].Value = model.user_id;行 346:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 347:              accountlogParams[2].Value = 0;行 348:              accountlogParams[3].Value = 0;行 349:              accountlogParams[4].Value = 0;行 350:              accountlogParams[5].Value = logTime;行 351:              accountlogParams[6].Value = "差额退款，订单[" + orderSn + "]";行 352:              accountlogParams[7].Value = 99;行 353:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 354:  行 355:              //执行行 356:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 357:              {行 358:                  ret = CConstant.SUCCESS;行 359:              }行 360:              else行 361:              {行 362:                  ret = CConstant.ERROR;行 363:              }行 364:              return ret;行 365:          }行 366:          #endregion行 367:  行 368:  行 369:          #region   得到一个对象实体行 370:          /// <summary>行 371:          /// 得到一个对象实体行 372:          /// </summary>行 373:          public BllOrderInfoTable GetModel(int orderId)行 374:          {行 375:  行 376:              StringBuilder strSql = new StringBuilder();行 377:              strSql.Append("select * from ecs_order_info ");行 378:              strSql.Append(" where order_id=@order_id");行 379:              MySqlParameter[] parameters = {行 380:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 381:              };行 382:              parameters[0].Value = orderId;行 383:  行 384:              BllOrderInfoTable model = new BllOrderInfoTable();行 385:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 386:              if (ds.Tables[0].Rows.Count > 0)行 387:              {行 388:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 389:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 390:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 391:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 392:                  {行 393:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 396:                  {行 397:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 400:                  {行 401:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 402:                  }行 403:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 404:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 405:                  {行 406:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 407:                  }行 408:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 409:                  {行 410:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 411:                  }行 412:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 413:                  {行 414:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 415:                  }行 416:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 417:                  {行 418:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 419:                  }行 420:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 421:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 422:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 423:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 424:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 425:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 426:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 427:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 429:                  {行 430:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 431:                  }行 432:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 433:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 434:                  {行 435:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 436:                  }行 437:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 438:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 439:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 440:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 441:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 442:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 443:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 444:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 445:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 446:                  {行 447:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 448:                  }行 449:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 450:                  {行 451:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 452:                  }行 453:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 454:                  {行 455:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 456:                  }行 457:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 458:                  {行 459:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 460:                  }行 461:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 462:                  {行 463:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 464:                  }行 465:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 466:                  {行 467:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 468:                  }行 469:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 470:                  {行 471:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 472:                  }行 473:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 474:                  {行 475:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 476:                  }行 477:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 478:                  {行 479:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 480:                  }行 481:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 482:                  {行 483:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 486:                  {行 487:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 490:                  {行 491:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 494:                  {行 495:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 496:                  }行 497:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 498:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 499:                  {行 500:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 501:                  }行 502:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 503:                  {行 504:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 505:                  }行 506:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 507:                  {行 508:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 509:                  }行 510:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 511:                  {行 512:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 513:                  }行 514:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 515:                  {行 516:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 517:                  }行 518:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 519:                  {行 520:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 521:                  }行 522:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 523:                  {行 524:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 525:                  }行 526:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 527:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 528:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 529:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 530:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 531:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 532:                  {行 533:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 534:                  }行 535:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 536:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 537:                  {行 538:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 539:                  }行 540:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 541:                  //{行 542:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 543:                  //}行 544:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 545:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 546:                  {行 547:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 548:                  }行 549:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 550:                  {行 551:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 552:                  }行 553:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 554:                  {行 555:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 556:                  }行 557:                  return model;行 558:              }行 559:              else行 560:              {行 561:                  return null;行 562:              }行 563:          }行 564:          #endregion行 565:  行 566:  行 567:  行 568:      }//end class行 569:  }行 570:  行 571:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 17:10:07,052 [13][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 311:            actionParams[3].Value = model.shipping_status;
行 312:            actionParams[4].Value = model.pay_status;
<font color=red>行 313:            actionParams[5].Value = "订单拣货完成，差额退款：" + model.goods_amount - Convert.ToDecimal(actualGoodsAmount);
</font>行 314:            actionParams[6].Value = logTime;
行 315:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  313
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 210:                }
行 211:            }
<font color=red>行 212:            catch (Exception ex)
</font>行 213:            {
行 214:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 250:                }
行 251:            }
<font color=red>行 252:            catch (Exception ex)
</font>行 253:            {
行 254:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.13.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.u6i8ce0o.22.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(212,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(252,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313,37): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Collections;行 3:    using System.Linq;行 4:    using System.Web;行 5:    using System.Web.Services;行 6:    using System.Web.Services.Protocols;行 7:    using System.Xml.Linq;行 8:    using CZZD.GSZX.Common;行 9:    using CZZD.GSZX.BLL;行 10:   using System.Data;行 11:   using log4net;行 12:   using System.Reflection;行 13:   行 14:   namespace CZZD.GSZX.Web行 15:   {行 16:       /// <summary>行 17:       ///ReceiveWebService 的摘要说明行 18:       /// </summary>行 19:       [WebService(Namespace = "http://czzd.gszx.web.receive")]行 20:       //[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]行 21:       //若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消对下行的注释。 行 22:       // [System.Web.Script.Services.ScriptService]行 23:       public class _Receive : System.Web.Services.WebService行 24:       {行 25:           private static ILog _log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);行 26:   行 27:           public _Receive()行 28:           {行 29:   行 30:               //如果使用设计的组件，请取消注释以下行 行 31:               //InitializeComponent(); 行 32:           }行 33:   行 34:           //[WebMethod]行 35:           //public string HelloWorld()行 36:           //{行 37:           //    return "Hello World";行 38:           //}行 39:   行 40:           /// <summary>行 41:           /// 获得系统时间行 42:           /// </summary>行 43:           [WebMethod]行 44:           public string GetSystemTime()行 45:           {行 46:               return DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");行 47:           }行 48:   行 49:           #region 订单送信状态[订单确认]/结束[订单结束]的回写行 50:           /// <summary>行 51:           /// 订单送信状态[订单确认]/结束[订单结束]的回写行 52:           /// </summary>行 53:           /// <param name="type"></param>行 54:           /// <param name="orderIDs">用'|'分隔　例(1|2|3|4|5|6)</param>行 55:           /// <param name="time"></param>行 56:           /// <param name="keys"></param>行 57:           /// <returns></returns>行 58:           [WebMethod]行 59:           public string ReceiveOrderStatus(string type, string orderIds, string time, string keys)行 60:           {行 61:               string ret = CConstant.CONN_ERROR;行 62:               try行 63:               {行 64:                   if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 65:                   {行 66:                       ret = CConstant.CONN_ERROR;行 67:                   }行 68:                   else行 69:                   {行 70:                       BBllOrderInfo bll = new BBllOrderInfo();行 71:                       DataSet ds = bll.ReceiveOrderStatus(type, orderIds);行 72:                       if (ds.Tables[0].Rows.Count > 0)行 73:                       {行 74:                           ret = CConstant.SUCCESS + CCommon.DataSetToXml("order_info", ds.Tables[0]);行 75:                       }行 76:                       else行 77:                       {行 78:                           ret = CConstant.NO_DATA; //记录不存在行 79:                       }行 80:                   }行 81:               }行 82:               catch (Exception ex)行 83:               {行 84:                   ret = CConstant.ERROR;　//系统异常行 85:                   _log.Error(ex.Message, ex);行 86:               }行 87:               return ret;行 88:           }行 89:           #endregion行 90:   行 91:           //#region 单张订单实际金额，实际重量及账户余额的更新行 92:           ///// <summary>行 93:           ///// 单张订单实际金额，实际重量及账户余额的更新行 94:           ///// </summary>行 95:           ///// <param name="type"></param>行 96:           ///// <param name="orderIDs"></param>行 97:           ///// <param name="values"></param>行 98:           ///// <param name="time"></param>行 99:           ///// <param name="keys"></param>行 100:          ///// <returns></returns>行 101:          //[WebMethod]行 102:          //public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys)行 103:          //{行 104:          //    string ret = CConstant.CONN_ERROR;行 105:  行 106:          //    try行 107:          //    {行 108:          //        if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 109:          //        {行 110:          //            ret = CConstant.CONN_ERROR;行 111:          //        }行 112:          //        else行 113:          //        {行 114:          //            BBllOrderInfo bll = new BBllOrderInfo();行 115:          //            ret = bll.ReceiveOrderInfo(type, orderId, actualGoodsAmount, values);行 116:          //        }行 117:          //    }行 118:          //    catch (Exception ex)行 119:          //    {行 120:          //        ret = CConstant.ERROR;　//系统异常行 121:          //    }行 122:          //    return ret;行 123:          //}行 124:          //#endregion行 125:  行 126:          #region 多张订单实际金额，实际重量及账户余额的更新行 127:          /// <summary>行 128:          /// 多张订单实际金额，实际重量及账户余额的更新行 129:          /// </summary>行 130:          /// <param name="type"></param>行 131:          /// <param name="values"></param>行 132:          /// <param name="time"></param>行 133:          /// <param name="keys"></param>行 134:          /// <returns></returns>行 135:          [WebMethod]行 136:          public string ReceiveOrderInfos(string type, string xmlData, string time, string keys)行 137:          {行 138:              DataTable dt = new DataTable();行 139:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 140:              dt.Columns.Add("status", Type.GetType("System.String"));行 141:              DataRow retDr = null;行 142:              string ret = CConstant.CONN_ERROR;行 143:              try行 144:              {行 145:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 146:                  {行 147:                      ret = CConstant.CONN_ERROR;行 148:                  }行 149:                  else行 150:                  {行 151:                      BBllOrderInfo bll = new BBllOrderInfo();行 152:                      DataSet ds = CCommon.XmlToDataSet(xmlData);行 153:                      int currentOrderId = 0;行 154:                      string currentOrderSn = "";行 155:                      string values = "";行 156:                      string actualGoodsAmount = "0";行 157:                      foreach (DataRow dr in ds.Tables[0].Rows)行 158:                      {行 159:                          int orderId = CConvert.ToInt32(dr["ORDER_ID"]);行 160:                          string orderSn = CConvert.ToString(dr["ORDER_SN"]);行 161:                          if (currentOrderId != orderId)行 162:                          {行 163:                              if (currentOrderId == 0)行 164:                              {行 165:                                  currentOrderId = orderId;行 166:                                  currentOrderSn = orderSn;行 167:                              }行 168:                              else行 169:                              {行 170:                                  retDr = dt.NewRow();行 171:                                  retDr["orderId"] = currentOrderId;行 172:                                  //更新行 173:                                  try行 174:                                  {行 175:                                      retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values);行 176:                                  }行 177:                                  catch (Exception ex)行 178:                                  {行 179:                                      retDr["status"] = CConstant.ERROR;行 180:                                      _log.Error(currentOrderId, ex);行 181:                                  }行 182:                                  dt.Rows.Add(retDr);行 183:                                  currentOrderId = orderId;行 184:                                  currentOrderSn = "";行 185:                                  values = "";行 186:                              }行 187:  行 188:                          }行 189:                          values += CConvert.ToString(dr["REC_ID"]) + "|" + CConvert.ToString(dr["ACTUAL_NUMBER"]) + "|" + CConvert.ToString(dr["ACTUAL_AMOUNT"]) + ",";行 190:                          actualGoodsAmount = CConvert.ToString(dr["ACTUAL_GOODS_AMOUNT"]);行 191:                      }行 192:  行 193:                      if (currentOrderId != 0)行 194:                      {行 195:                          retDr = dt.NewRow();行 196:                          retDr["orderId"] = currentOrderId;行 197:                          //更新行 198:                          try行 199:                          {行 200:                              retDr["status"] = bll.ReceiveOrderInfo(type, currentOrderId, currentOrderSn, actualGoodsAmount, values.Substring(0, values.Length - 1));行 201:                          }行 202:                          catch (Exception ex)行 203:                          {行 204:                              retDr["status"] = CConstant.ERROR;行 205:                              _log.Error(currentOrderId, ex);行 206:                          }行 207:                          dt.Rows.Add(retDr);行 208:                      }行 209:                      ret = CConstant.SUCCESS;行 210:                  }行 211:              }行 212:              catch (Exception ex)行 213:              {行 214:                  ret = CConstant.ERROR;　//系统异常行 215:              }行 216:  行 217:              return ret + CCommon.DataSetToXml("order_info", dt);行 218:          }行 219:          #endregion行 220:  行 221:          #region 单张/多张订单的消息更新行 222:          /// <summary>行 223:          /// 单张/多张订单的消息更新行 224:          /// </summary>行 225:          /// <param name="type"></param>行 226:          /// <param name="values"></param>行 227:          /// <param name="time"></param>行 228:          /// <param name="keys"></param>行 229:          /// <returns></returns>行 230:          [WebMethod]行 231:          public string ReceiveMessage(string type, string values, string time, string keys)行 232:          {行 233:              string ret = "";行 234:  行 235:              try行 236:              {行 237:                  if (!DESEncrypt.Decrypt(keys, CConstant.KEYS).Equals(type + time + CConstant.E_COMMERCE_KEYS))行 238:                  {行 239:                      ret = CConstant.NO_DATA;行 240:                  }行 241:                  else行 242:                  {行 243:                      switch (type)行 244:                      {行 245:                          case "single":行 246:                              break;行 247:                          case "list":行 248:                              break;行 249:                      }行 250:                  }行 251:              }行 252:              catch (Exception ex)行 253:              {行 254:                  ret = CConstant.ERROR;　//系统异常行 255:              }行 256:              return ret;行 257:          }行 258:          #endregion行 259:  行 260:      } //end class行 261:  }行 262:  行 263:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 17:10:28,034 [13][INFO ][OrderInfoTimerManage] - [订单拣货确认]系统异常。
System.InvalidOperationException: 客户端发现响应内容类型为“text/html; charset=utf-8”，但应为“text/xml”。
请求失败，错误信息为:
--
<html>
    <head>
        <title>编译错误</title>
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Lucida Console";font-size: .9em}
         .marker {font-weight: bold; color: black;text-decoration: none;}
         .version {color: gray;}
         .error {margin-bottom: 10px;}
         .expandable { text-decoration:underline; font-weight:bold; color:navy; cursor:hand; }
        </style>
    </head>

    <body bgcolor="white">

            <span><H1>“/GS_WebService”应用程序中的服务器错误。<hr width=100% size=1 color=silver></H1>

            <h2> <i>编译错误</i> </h2></span>

            <font face="Arial, Helvetica, Geneva, SunSans-Regular, sans-serif ">

            <b> 说明: </b>在编译向该请求提供服务所需资源的过程中出现错误。请检查下列特定错误详细信息并适当地修改源代码。
            <br><br>

            <b> 编译器错误消息: </b>CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数<br><br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
                              </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 311:            actionParams[3].Value = model.shipping_status;
行 312:            actionParams[4].Value = model.pay_status;
<font color=red>行 313:            actionParams[5].Value = "订单拣货完成，差额退款：" + model.goods_amount - Convert.ToDecimal(actualGoodsAmount);
</font>行 314:            actionParams[6].Value = logTime;
行 315:            sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));</pre></code>

                  </td>
               </tr>
            </table>

            <br>

            <b>源文件:</b> d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs
            ?? <b>行:</b>  313
            <br><br>
<br><div class="expandable" onclick="OnToggleTOCLevel1('warningDiv')">编译器警告消息:</div>
<div id="warningDiv" style="display: none;">
<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 229:                    }
行 230:                }
<font color=red>行 231:                catch (Exception ex)
</font>行 232:                {
行 233:                    dr["status"] = CConstant.ERROR;</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 210:                }
行 211:            }
<font color=red>行 212:            catch (Exception ex)
</font>行 213:            {
行 214:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 250:                }
行 251:            }
<font color=red>行 252:            catch (Exception ex)
</font>行 253:            {
行 254:                ret = CConstant.ERROR;　//系统异常</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“e”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 344:                    return count;
行 345:                }
<font color=red>行 346:                catch(Exception e)
</font>行 347:                {
行 348:                    tx.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

<b>警告:</b> CS0168: 声明了变量“ex”，但从未使用过<br>
<b>源错误:</b><br><br>
            <table width=100% bgcolor="#ffffcc">
               <tr><td>
               <b>d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs</b>
               </td></tr>
               <tr>
                  <td>
                      <code><pre>

行 384:                        val = 1;
行 385:                    }
<font color=red>行 386:                    catch (Exception ex)
</font>行 387:                    {
行 388:                        trans.Rollback();</pre></code>

                  </td>
               </tr>
            </table>

            <br>

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('compilerOutputDiv')">显示详细的编译器输出:</div>
<div id="compilerOutputDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

D:\果蔬在线\GS_WebService> "C:\Windows\Microsoft.NET\Framework\v3.5\csc.exe" /t:library /utf8output /R:"C:\Windows\assembly\GAC_MSIL\System\2.0.0.0__b77a5c561934e089\System.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Services\2.0.0.0__b03f5f7f11d50a3a\System.Web.Services.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.IdentityModel\3.0.0.0__b77a5c561934e089\System.IdentityModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Extensions\3.5.0.0__31bf3856ad364e35\System.Web.Extensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel\3.0.0.0__b77a5c561934e089\System.ServiceModel.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Configuration\2.0.0.0__b03f5f7f11d50a3a\System.Configuration.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Data.DataSetExtensions\3.5.0.0__b77a5c561934e089\System.Data.DataSetExtensions.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.WorkflowServices\3.5.0.0__31bf3856ad364e35\System.WorkflowServices.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Web.Mobile\2.0.0.0__b03f5f7f11d50a3a\System.Web.Mobile.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Core\3.5.0.0__b77a5c561934e089\System.Core.dll" /R:"C:\Windows\assembly\GAC_32\System.Web\2.0.0.0__b03f5f7f11d50a3a\System.Web.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Drawing\2.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\0576c63e\00eae7bd_97facc01\MySql.Data.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml.Linq\3.5.0.0__b77a5c561934e089\System.Xml.Linq.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\mscorlib.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.Xml\2.0.0.0__b77a5c561934e089\System.Xml.dll" /R:"C:\Windows\assembly\GAC_32\System.EnterpriseServices\2.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.dll" /R:"C:\Windows\assembly\GAC_32\System.Data\2.0.0.0__b77a5c561934e089\System.Data.dll" /R:"C:\Windows\assembly\GAC_MSIL\System.ServiceModel.Web\3.5.0.0__31bf3856ad364e35\System.ServiceModel.Web.dll" /R:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\assembly\dl3\fd8c0424\00479f40_1d84cc01\log4net.DLL" /R:"C:\Windows\assembly\GAC_MSIL\System.Runtime.Serialization\3.0.0.0__b77a5c561934e089\System.Runtime.Serialization.dll" /out:"C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.dll" /D:DEBUG /debug+ /optimize- /w:4 /nowarn:1659;1699;1701 /warnaserror-  "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.26.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.14.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.21.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.19.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.3.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.2.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.11.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.0.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.7.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.6.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.12.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.4.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.23.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.29.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.9.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.8.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.18.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.1.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.22.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.10.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.5.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.27.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.15.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.28.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.16.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.24.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.17.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.20.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.25.cs" "C:\Windows\Microsoft.NET\Framework\v2.0.50727\Temporary ASP.NET Files\gs_webservice\9ac9120e\915d55aa\App_Code.vjirw4ly.13.cs"


适用于 Microsoft(R) .NET Framework 3.5 版的 Microsoft(R) Visual C# 2008 编译器 3.5.30729.5420
 版
版权所有(C) Microsoft Corporation。保留所有权利。

d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(231,34): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313,37): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(212,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\Receive.cs(252,30): warning CS0168: 声明了变量“ex”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(346,33): warning CS0168: 声明了变量“e”，但从未使用过
d:\果蔬在线\GS_WebService\GS_WebService\App_Code\DBUtility\SqlDBHelper.cs(386,38): warning CS0168: 声明了变量“ex”，但从未使用过
</pre></code>

                  </td>
               </tr>
            </table>

            

</div>
<br><div class="expandable" onclick="OnToggleTOCLevel1('dynamicCodeDiv')">显示完整的编译源:</div>
<div id="dynamicCodeDiv" style="display: none;">
            <br><table width=100% bgcolor="#ffffcc">
               <tr>
                  <td>
                      <code><pre>

行 1:    using System;行 2:    using System.Data;行 3:    using System.Text;行 4:    using MySql.Data.MySqlClient;行 5:    using CZZD.GSZX.DBUtility;行 6:    using CZZD.GSZX.Common;行 7:    using System.Collections.Generic;行 8:    using CZZD.GSZX.Model;//Please add references行 9:    namespace CZZD.GSZX.DAL行 10:   {行 11:       /// <summary>行 12:       /// 数据访问类:ecs_order_info行 13:       /// </summary>行 14:       public class BllOrderInfoManage行 15:       {行 16:           public BllOrderInfoManage()行 17:           { }行 18:   行 19:           #region 送信行 20:           /// <summary>行 21:           /// 订单信息的取得　--　根据查询条件返回查询到的订单编号/订单编号的统计数量行 22:           /// </summary>行 23:           /// <param name="type"></param>行 24:           /// <param name="startTime"></param>行 25:           /// <param name="endTime"></param>行 26:           /// <param name="sendStatus"></param>行 27:           /// <param name="strWhere"></param>行 28:           /// <returns></returns>行 29:           public DataSet GetOrderIds(string type, string startTime, string endTime, string sendStatus, string strWhere)行 30:           {行 31:   行 32:               StringBuilder strSql = new StringBuilder();行 33:               strSql.Append("where 1=1");行 34:               if (!string.IsNullOrEmpty(startTime))行 35:               {行 36:                   strSql.AppendFormat(" and add_time>={0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(startTime)));行 37:               }行 38:   行 39:               if (!string.IsNullOrEmpty(endTime))行 40:               {行 41:                   strSql.AppendFormat(" and add_time<{0} ", CCommon.DateTimeToUnixTime(CConvert.ToDateTime(endTime)));行 42:               }行 43:   行 44:               if (!string.IsNullOrEmpty(sendStatus))行 45:               {行 46:                   strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 47:               }行 48:   行 49:               if (!string.IsNullOrEmpty(strWhere))行 50:               {行 51:                   strSql.AppendFormat(" and {0} ", strWhere);行 52:               }行 53:   行 54:               DataSet ds = new DataSet();行 55:               if (CConstant.TYPE_COUNT.Equals(type))行 56:               {行 57:                   ds = MySqlDBHelper.Query(" select count(1) as count from ecs_order_info " + strSql.ToString());行 58:               }行 59:               else if (CConstant.TYPE_LIST.Equals(type))行 60:               {行 61:                   ds = MySqlDBHelper.Query(" select order_id from ecs_order_info " + strSql.ToString());行 62:               }行 63:               return ds;行 64:           }行 65:   行 66:           /// <summary>行 67:           ///  订单信息的取得　--　根据订单编号返回一个/多个订单的所有信息行 68:           /// </summary>行 69:           /// <param name="type"></param>行 70:           /// <param name="orderID"></param>行 71:           /// <returns></returns>行 72:           public DataSet GetOrders(string type, string orderIds)行 73:           {行 74:               StringBuilder strSql = new StringBuilder();行 75:               strSql.Append("select oi.* ,");行 76:               strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 77:               strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 78:               strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift,og.actual_number,og.actual_amount ");行 79:               strSql.Append("from ecs_order_info as oi ");行 80:               strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 81:               strSql.Append("where 1=1 ");行 82:   行 83:               if (!string.IsNullOrEmpty(orderIds))行 84:               {行 85:                   strSql.AppendFormat("and  oi.order_id in({0}) ", orderIds);行 86:               }行 87:               strSql.Append("order by oi.order_id ");行 88:               return MySqlDBHelper.Query(strSql.ToString());行 89:   行 90:           }行 91:   行 92:           /// <summary>行 93:           /// 订单信息的取得　--　根据查询条件返回查询到的订单数据行 94:           /// </summary>行 95:           /// <param name="type"></param>行 96:           /// <param name="startTime"></param>行 97:           /// <param name="endTime"></param>行 98:           /// <param name="sendStatus"></param>行 99:           /// <param name="strWhere"></param>行 100:          /// <returns></returns>行 101:          public DataSet SelectOrders(string type, string startTime, string endTime, string sendStatus, string strWhere)行 102:          {行 103:              StringBuilder strSql = new StringBuilder();行 104:              strSql.Append("select oi.* ,");行 105:              strSql.Append("og.rec_id,og.order_id as og_order_id,og.goods_id,og.goods_name,og.goods_sn, ");行 106:              strSql.Append("og.goods_number,og.market_price,og.goods_price,og.goods_attr,og.send_number, ");行 107:              strSql.Append("og.is_real,og.extension_code as og_extension_code,og.parent_id as og_parent_id,og.is_gift ");行 108:              strSql.Append("from ecs_order_info as oi ");行 109:              strSql.Append("left join ecs_order_goods as og on oi.order_id = og.order_id ");行 110:              strSql.Append("where 1=1");行 111:  行 112:              if (!string.IsNullOrEmpty(startTime))行 113:              {行 114:                  strSql.AppendFormat(" and last_update_time>='{0}' ", startTime);行 115:              }行 116:  行 117:              if (!string.IsNullOrEmpty(endTime))行 118:              {行 119:                  strSql.AppendFormat(" and last_update_time<='{0}' ", endTime);行 120:              }行 121:  行 122:              if (!string.IsNullOrEmpty(sendStatus))行 123:              {行 124:                  strSql.AppendFormat(" and send_status = {0} ", sendStatus);行 125:              }行 126:  行 127:              if (!string.IsNullOrEmpty(strWhere))行 128:              {行 129:                  strSql.AppendFormat(" and {0} ", strWhere);行 130:              }行 131:  行 132:              return MySqlDBHelper.Query(strSql.ToString());行 133:          }行 134:          #endregion行 135:  行 136:  行 137:          #region  收信行 138:          /// <summary>行 139:          /// 订单送信状态[订单确认]/结束[订单结束]的回写行 140:          /// </summary>行 141:          /// <param name="type"></param>行 142:          /// <param name="orderIDs"></param>行 143:          /// <returns></returns>行 144:          public DataSet ReceiveOrderStatus(string type, string orderIDs)行 145:          {行 146:              DataSet ds = new DataSet();行 147:              DataTable dt = new DataTable();行 148:              dt.Columns.Add("orderId", Type.GetType("System.String"));行 149:              dt.Columns.Add("status", Type.GetType("System.String"));行 150:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 151:              StringBuilder strSql = null;行 152:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 153:  行 154:              foreach (string orderId in orderIDs.Split('|'))行 155:              {行 156:                  DataRow dr = dt.NewRow();行 157:                  dr["orderId"] = orderId;行 158:                  try行 159:                  {行 160:                      //查看订单状态，最否己付款，是否未发货行 161:                      BllOrderInfoTable model = GetModel(CConvert.ToInt32(orderId));行 162:                      if (true)行 163:                      {行 164:  行 165:                      }行 166:  行 167:                      strSql = new StringBuilder();行 168:                      strSql.Append(" update ecs_order_info set ");行 169:                      if (CConstant.TYPE_SEND_STATUS.Equals(type)) //订单送信状态[订单确认]行 170:                      {行 171:                          strSql.AppendFormat(" send_status={0}", CConstant.ORDER_SEND);行 172:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 173:                          //strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 174:                          //strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_UNSHIPPED);行 175:                      }行 176:                      else if (CConstant.TYPE_COMPLETED.Equals(type)) //订单收货确认[订单结束]行 177:                      {行 178:                          strSql.AppendFormat(" shipping_status={0}", CConstant.ORDER_RECEIPT);行 179:                          strSql.AppendFormat(" where pay_status={0}", CConstant.ORDER_PAID);行 180:                          strSql.AppendFormat(" and order_status={0}", CConstant.ORDER_NORMAL);行 181:                          strSql.AppendFormat(" and shipping_status={0}", CConstant.ORDER_SHIPPED);行 182:                      }行 183:                      else行 184:                      {行 185:                          dr["status"] = CConstant.ERROR;行 186:                          dt.Rows.Add(dr);行 187:                          continue;行 188:                      }行 189:  行 190:                      strSql.Append(" and order_id=@order_id");行 191:                      MySqlParameter[] infoParams = { 行 192:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 193:                                          };行 194:                      infoParams[0].Value = orderId;行 195:                      sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 196:  行 197:                      //订单收货确认行 198:                      if (CConstant.TYPE_COMPLETED.Equals(type))行 199:                      {行 200:                          strSql = new StringBuilder();行 201:                          strSql.Append("insert into ecs_order_action(");行 202:                          strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 203:                          strSql.Append(" values (");行 204:                          strSql.Append("@order_id,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 205:                          MySqlParameter[] actionParams = {行 206:  					        new MySqlParameter("@order_id", MySqlDbType.Int32),行 207:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 208:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 209:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 210:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 211:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 212:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 213:                          actionParams[0].Value = model.order_id;行 214:                          actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 215:                          actionParams[2].Value = CConstant.ORDER_NORMAL;行 216:                          actionParams[3].Value = model.shipping_status;行 217:                          actionParams[4].Value = model.pay_status;行 218:                          actionParams[5].Value = "订单收货确认";行 219:                          actionParams[6].Value = logTime;行 220:                          sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 221:                      }行 222:                      if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 223:                      {行 224:                          dr["status"] = CConstant.SUCCESS;行 225:                      }行 226:                      else行 227:                      {行 228:                          dr["status"] = CConstant.ERROR;行 229:                      }行 230:                  }行 231:                  catch (Exception ex)行 232:                  {行 233:                      dr["status"] = CConstant.ERROR;行 234:                  }行 235:                  dt.Rows.Add(dr);行 236:                  sqlList = new List<MySqlCommandInfo>();行 237:              }行 238:              ds.Tables.Add(dt);行 239:              return ds;行 240:          }行 241:  行 242:          /// <summary>行 243:          /// 单张订单实际金额，实际重量及账户余额的更新行 244:          /// </summary>行 245:          /// <param name="type"></param>行 246:          /// <param name="orderId"></param>行 247:          /// <param name="totalAmount"></param>行 248:          /// <param name="values"></param>行 249:          /// <returns></returns>行 250:          public string ReceiveOrderInfo(string type, int orderId, string orderSn, string actualGoodsAmount, string values)行 251:          {行 252:              string ret = CConstant.SUCCESS;行 253:              List<MySqlCommandInfo> sqlList = new List<MySqlCommandInfo>();行 254:              StringBuilder strSql = null;行 255:              int logTime = CCommon.DateTimeToUnixTime(DateTime.Now);行 256:  行 257:              //查看订单状态，最否己付款，是否未发货，是否己确认，送信状态行 258:              BllOrderInfoTable model = GetModel(orderId);行 259:              if (true)行 260:              {行 261:  行 262:              }行 263:  行 264:              // 订单信息更新行 265:              strSql = new StringBuilder();行 266:              strSql.Append(" update ecs_order_info set ");行 267:              strSql.Append(" actual_goods_amount=@actual_goods_amount");行 268:              strSql.AppendFormat(" where order_id=@order_id");行 269:              MySqlParameter[] infoParams = { 行 270:                                          new MySqlParameter("@actual_goods_amount",MySqlDbType.Decimal),行 271:                                          new MySqlParameter("@order_id",MySqlDbType.Int32)行 272:                                          };行 273:              infoParams[0].Value = actualGoodsAmount;行 274:              infoParams[1].Value = orderId;行 275:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), infoParams));行 276:  行 277:              //订单明细更新行 278:              foreach (string value in values.Split(','))行 279:              {行 280:                  string[] v = value.Split('|');行 281:                  int recId = CConvert.ToInt32(v[0]);行 282:                  decimal actualNumber = CConvert.ToDecimal(v[1]);行 283:                  decimal actualAmount = CConvert.ToDecimal(v[2]);行 284:  行 285:                  strSql = new StringBuilder();行 286:                  strSql.Append("update ecs_order_goods set ");行 287:                  strSql.AppendFormat("actual_number= {0},", actualNumber);行 288:                  strSql.AppendFormat("actual_amount= {0} ", actualAmount);行 289:                  strSql.AppendFormat(" where rec_id= {0} ", recId);行 290:                  MySqlParameter[] goodsParams = { };行 291:                  sqlList.Add(new MySqlCommandInfo(strSql.ToString(), goodsParams));行 292:              }行 293:  行 294:              //订单操作记录行 295:              strSql = new StringBuilder();行 296:              strSql.Append("insert into ecs_order_action(");行 297:              strSql.Append("order_id,action_user,order_status,shipping_status,pay_status,action_note,log_time)");行 298:              strSql.Append(" values (");行 299:              strSql.Append("@order_id_action,@action_user,@order_status,@shipping_status,@pay_status,@action_note,@log_time)");行 300:              MySqlParameter[] actionParams = {行 301:  					        new MySqlParameter("@order_id_action", MySqlDbType.Int32),行 302:  					        new MySqlParameter("@action_user", MySqlDbType.VarChar,30),行 303:  					        new MySqlParameter("@order_status", MySqlDbType.Int32,1),行 304:  					        new MySqlParameter("@shipping_status", MySqlDbType.Int32,1),行 305:  					        new MySqlParameter("@pay_status", MySqlDbType.Int32,1),行 306:  					        new MySqlParameter("@action_note", MySqlDbType.VarChar,255),行 307:  					        new MySqlParameter("@log_time", MySqlDbType.Int32,11)};行 308:              actionParams[0].Value = orderId;行 309:              actionParams[1].Value = CConstant.DEFAULT_USER_CODE;行 310:              actionParams[2].Value = model.order_status;行 311:              actionParams[3].Value = model.shipping_status;行 312:              actionParams[4].Value = model.pay_status;行 313:              actionParams[5].Value = "订单拣货完成，差额退款：" + model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 314:              actionParams[6].Value = logTime;行 315:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), actionParams));行 316:  行 317:              //帐户余额更新行 318:              strSql = new StringBuilder();行 319:              strSql.Append("update ecs_users set ");行 320:              strSql.Append("user_money=user_money+@user_money");行 321:              strSql.Append(" where user_id=@user_id");行 322:              MySqlParameter[] userParams = {行 323:  					new MySqlParameter("@user_id", MySqlDbType.Int32),行 324:  					new MySqlParameter("@user_money", MySqlDbType.Decimal,10)行 325:  					};行 326:              userParams[0].Value = model.user_id;行 327:              userParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 328:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), userParams));行 329:  行 330:              //账户余额变动记录行 331:              strSql = new StringBuilder();行 332:              strSql.Append("insert into ecs_account_log(");行 333:              strSql.Append("user_id,user_money,frozen_money,rank_points,pay_points,change_time,change_desc,change_type)");行 334:              strSql.Append(" values (");行 335:              strSql.Append("@user_id_log,@user_money_log,@frozen_money,@rank_points,@pay_points,@change_time,@change_desc,@change_type)");行 336:              MySqlParameter[] accountlogParams = {行 337:  					new MySqlParameter("@user_id_log", MySqlDbType.Int32),行 338:  					new MySqlParameter("@user_money_log", MySqlDbType.Decimal,10),行 339:  					new MySqlParameter("@frozen_money", MySqlDbType.Decimal,10),行 340:  					new MySqlParameter("@rank_points", MySqlDbType.Int32),行 341:  					new MySqlParameter("@pay_points", MySqlDbType.Int32),行 342:  					new MySqlParameter("@change_time", MySqlDbType.Int32),行 343:  					new MySqlParameter("@change_desc", MySqlDbType.VarChar,255),行 344:  					new MySqlParameter("@change_type", MySqlDbType.Int32)};行 345:              accountlogParams[0].Value = model.user_id;行 346:              accountlogParams[1].Value = model.goods_amount - Convert.ToDecimal(actualGoodsAmount);行 347:              accountlogParams[2].Value = 0;行 348:              accountlogParams[3].Value = 0;行 349:              accountlogParams[4].Value = 0;行 350:              accountlogParams[5].Value = logTime;行 351:              accountlogParams[6].Value = "差额退款，订单[" + orderSn + "]";行 352:              accountlogParams[7].Value = 99;行 353:              sqlList.Add(new MySqlCommandInfo(strSql.ToString(), accountlogParams));行 354:  行 355:              //执行行 356:              if (MySqlDBHelper.ExecuteCommandTrans(sqlList) > 0)行 357:              {行 358:                  ret = CConstant.SUCCESS;行 359:              }行 360:              else行 361:              {行 362:                  ret = CConstant.ERROR;行 363:              }行 364:              return ret;行 365:          }行 366:          #endregion行 367:  行 368:  行 369:          #region   得到一个对象实体行 370:          /// <summary>行 371:          /// 得到一个对象实体行 372:          /// </summary>行 373:          public BllOrderInfoTable GetModel(int orderId)行 374:          {行 375:  行 376:              StringBuilder strSql = new StringBuilder();行 377:              strSql.Append("select * from ecs_order_info ");行 378:              strSql.Append(" where order_id=@order_id");行 379:              MySqlParameter[] parameters = {行 380:  					new MySqlParameter("@order_id", MySqlDbType.Int32)行 381:              };行 382:              parameters[0].Value = orderId;行 383:  行 384:              BllOrderInfoTable model = new BllOrderInfoTable();行 385:              DataSet ds = MySqlDBHelper.Query(strSql.ToString(), parameters);行 386:              if (ds.Tables[0].Rows.Count > 0)行 387:              {行 388:                  //model.order_id=ds.Tables[0].Rows[0]["order_id"].ToString();行 389:                  model.order_sn = ds.Tables[0].Rows[0]["order_sn"].ToString();行 390:                  //model.user_id=ds.Tables[0].Rows[0]["user_id"].ToString();行 391:                  if (ds.Tables[0].Rows[0]["order_status"].ToString() != "")行 392:                  {行 393:                      model.order_status = int.Parse(ds.Tables[0].Rows[0]["order_status"].ToString());行 394:                  }行 395:                  if (ds.Tables[0].Rows[0]["shipping_status"].ToString() != "")行 396:                  {行 397:                      model.shipping_status = int.Parse(ds.Tables[0].Rows[0]["shipping_status"].ToString());行 398:                  }行 399:                  if (ds.Tables[0].Rows[0]["pay_status"].ToString() != "")行 400:                  {行 401:                      model.pay_status = int.Parse(ds.Tables[0].Rows[0]["pay_status"].ToString());行 402:                  }行 403:                  model.consignee = ds.Tables[0].Rows[0]["consignee"].ToString();行 404:                  if (ds.Tables[0].Rows[0]["country"].ToString() != "")行 405:                  {行 406:                      model.country = int.Parse(ds.Tables[0].Rows[0]["country"].ToString());行 407:                  }行 408:                  if (ds.Tables[0].Rows[0]["province"].ToString() != "")行 409:                  {行 410:                      model.province = int.Parse(ds.Tables[0].Rows[0]["province"].ToString());行 411:                  }行 412:                  if (ds.Tables[0].Rows[0]["city"].ToString() != "")行 413:                  {行 414:                      model.city = int.Parse(ds.Tables[0].Rows[0]["city"].ToString());行 415:                  }行 416:                  if (ds.Tables[0].Rows[0]["district"].ToString() != "")行 417:                  {行 418:                      model.district = int.Parse(ds.Tables[0].Rows[0]["district"].ToString());行 419:                  }行 420:                  model.address = ds.Tables[0].Rows[0]["address"].ToString();行 421:                  model.zipcode = ds.Tables[0].Rows[0]["zipcode"].ToString();行 422:                  model.tel = ds.Tables[0].Rows[0]["tel"].ToString();行 423:                  model.mobile = ds.Tables[0].Rows[0]["mobile"].ToString();行 424:                  model.email = ds.Tables[0].Rows[0]["email"].ToString();行 425:                  model.best_time = ds.Tables[0].Rows[0]["best_time"].ToString();行 426:                  model.sign_building = ds.Tables[0].Rows[0]["sign_building"].ToString();行 427:                  model.postscript = ds.Tables[0].Rows[0]["postscript"].ToString();行 428:                  if (ds.Tables[0].Rows[0]["shipping_id"].ToString() != "")行 429:                  {行 430:                      model.shipping_id = int.Parse(ds.Tables[0].Rows[0]["shipping_id"].ToString());行 431:                  }行 432:                  model.shipping_name = ds.Tables[0].Rows[0]["shipping_name"].ToString();行 433:                  if (ds.Tables[0].Rows[0]["pay_id"].ToString() != "")行 434:                  {行 435:                      model.pay_id = int.Parse(ds.Tables[0].Rows[0]["pay_id"].ToString());行 436:                  }行 437:                  model.pay_name = ds.Tables[0].Rows[0]["pay_name"].ToString();行 438:                  model.how_oos = ds.Tables[0].Rows[0]["how_oos"].ToString();行 439:                  model.how_surplus = ds.Tables[0].Rows[0]["how_surplus"].ToString();行 440:                  model.pack_name = ds.Tables[0].Rows[0]["pack_name"].ToString();行 441:                  model.card_name = ds.Tables[0].Rows[0]["card_name"].ToString();行 442:                  model.card_message = ds.Tables[0].Rows[0]["card_message"].ToString();行 443:                  model.inv_payee = ds.Tables[0].Rows[0]["inv_payee"].ToString();行 444:                  model.inv_content = ds.Tables[0].Rows[0]["inv_content"].ToString();行 445:                  if (ds.Tables[0].Rows[0]["goods_amount"].ToString() != "")行 446:                  {行 447:                      model.goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["goods_amount"].ToString());行 448:                  }行 449:                  if (ds.Tables[0].Rows[0]["shipping_fee"].ToString() != "")行 450:                  {行 451:                      model.shipping_fee = decimal.Parse(ds.Tables[0].Rows[0]["shipping_fee"].ToString());行 452:                  }行 453:                  if (ds.Tables[0].Rows[0]["insure_fee"].ToString() != "")行 454:                  {行 455:                      model.insure_fee = decimal.Parse(ds.Tables[0].Rows[0]["insure_fee"].ToString());行 456:                  }行 457:                  if (ds.Tables[0].Rows[0]["pay_fee"].ToString() != "")行 458:                  {行 459:                      model.pay_fee = decimal.Parse(ds.Tables[0].Rows[0]["pay_fee"].ToString());行 460:                  }行 461:                  if (ds.Tables[0].Rows[0]["pack_fee"].ToString() != "")行 462:                  {行 463:                      model.pack_fee = decimal.Parse(ds.Tables[0].Rows[0]["pack_fee"].ToString());行 464:                  }行 465:                  if (ds.Tables[0].Rows[0]["card_fee"].ToString() != "")行 466:                  {行 467:                      model.card_fee = decimal.Parse(ds.Tables[0].Rows[0]["card_fee"].ToString());行 468:                  }行 469:                  if (ds.Tables[0].Rows[0]["money_paid"].ToString() != "")行 470:                  {行 471:                      model.money_paid = decimal.Parse(ds.Tables[0].Rows[0]["money_paid"].ToString());行 472:                  }行 473:                  if (ds.Tables[0].Rows[0]["surplus"].ToString() != "")行 474:                  {行 475:                      model.surplus = decimal.Parse(ds.Tables[0].Rows[0]["surplus"].ToString());行 476:                  }行 477:                  if (ds.Tables[0].Rows[0]["integral"].ToString() != "")行 478:                  {行 479:                      model.integral = int.Parse(ds.Tables[0].Rows[0]["integral"].ToString());行 480:                  }行 481:                  if (ds.Tables[0].Rows[0]["integral_money"].ToString() != "")行 482:                  {行 483:                      model.integral_money = decimal.Parse(ds.Tables[0].Rows[0]["integral_money"].ToString());行 484:                  }行 485:                  if (ds.Tables[0].Rows[0]["bonus"].ToString() != "")行 486:                  {行 487:                      model.bonus = decimal.Parse(ds.Tables[0].Rows[0]["bonus"].ToString());行 488:                  }行 489:                  if (ds.Tables[0].Rows[0]["order_amount"].ToString() != "")行 490:                  {行 491:                      model.order_amount = decimal.Parse(ds.Tables[0].Rows[0]["order_amount"].ToString());行 492:                  }行 493:                  if (ds.Tables[0].Rows[0]["from_ad"].ToString() != "")行 494:                  {行 495:                      model.from_ad = int.Parse(ds.Tables[0].Rows[0]["from_ad"].ToString());行 496:                  }行 497:                  model.referer = ds.Tables[0].Rows[0]["referer"].ToString();行 498:                  if (ds.Tables[0].Rows[0]["add_time"].ToString() != "")行 499:                  {行 500:                      model.add_time = int.Parse(ds.Tables[0].Rows[0]["add_time"].ToString());行 501:                  }行 502:                  if (ds.Tables[0].Rows[0]["confirm_time"].ToString() != "")行 503:                  {行 504:                      model.confirm_time = int.Parse(ds.Tables[0].Rows[0]["confirm_time"].ToString());行 505:                  }行 506:                  if (ds.Tables[0].Rows[0]["pay_time"].ToString() != "")行 507:                  {行 508:                      model.pay_time = int.Parse(ds.Tables[0].Rows[0]["pay_time"].ToString());行 509:                  }行 510:                  if (ds.Tables[0].Rows[0]["shipping_time"].ToString() != "")行 511:                  {行 512:                      model.shipping_time = int.Parse(ds.Tables[0].Rows[0]["shipping_time"].ToString());行 513:                  }行 514:                  if (ds.Tables[0].Rows[0]["pack_id"].ToString() != "")行 515:                  {行 516:                      model.pack_id = int.Parse(ds.Tables[0].Rows[0]["pack_id"].ToString());行 517:                  }行 518:                  if (ds.Tables[0].Rows[0]["card_id"].ToString() != "")行 519:                  {行 520:                      model.card_id = int.Parse(ds.Tables[0].Rows[0]["card_id"].ToString());行 521:                  }行 522:                  if (ds.Tables[0].Rows[0]["bonus_id"].ToString() != "")行 523:                  {行 524:                      model.bonus_id = int.Parse(ds.Tables[0].Rows[0]["bonus_id"].ToString());行 525:                  }行 526:                  model.invoice_no = ds.Tables[0].Rows[0]["invoice_no"].ToString();行 527:                  model.extension_code = ds.Tables[0].Rows[0]["extension_code"].ToString();行 528:                  //model.extension_id=ds.Tables[0].Rows[0]["extension_id"].ToString();行 529:                  model.to_buyer = ds.Tables[0].Rows[0]["to_buyer"].ToString();行 530:                  model.pay_note = ds.Tables[0].Rows[0]["pay_note"].ToString();行 531:                  if (ds.Tables[0].Rows[0]["agency_id"].ToString() != "")行 532:                  {行 533:                      model.agency_id = int.Parse(ds.Tables[0].Rows[0]["agency_id"].ToString());行 534:                  }行 535:                  model.inv_type = ds.Tables[0].Rows[0]["inv_type"].ToString();行 536:                  if (ds.Tables[0].Rows[0]["tax"].ToString() != "")行 537:                  {行 538:                      model.tax = decimal.Parse(ds.Tables[0].Rows[0]["tax"].ToString());行 539:                  }行 540:                  //if (ds.Tables[0].Rows[0]["is_separate"].ToString() != "")行 541:                  //{行 542:                  //    model.is_separate = int.Parse(ds.Tables[0].Rows[0]["is_separate"].ToString());行 543:                  //}行 544:                  //model.parent_id=ds.Tables[0].Rows[0]["parent_id"].ToString();行 545:                  if (ds.Tables[0].Rows[0]["discount"].ToString() != "")行 546:                  {行 547:                      model.discount = decimal.Parse(ds.Tables[0].Rows[0]["discount"].ToString());行 548:                  }行 549:                  if (ds.Tables[0].Rows[0]["send_status"].ToString() != "")行 550:                  {行 551:                      model.send_status = int.Parse(ds.Tables[0].Rows[0]["send_status"].ToString());行 552:                  }行 553:                  if (ds.Tables[0].Rows[0]["actual_goods_amount"].ToString() != "")行 554:                  {行 555:                      model.actual_goods_amount = decimal.Parse(ds.Tables[0].Rows[0]["actual_goods_amount"].ToString());行 556:                  }行 557:                  return model;行 558:              }行 559:              else行 560:              {行 561:                  return null;行 562:              }行 563:          }行 564:          #endregion行 565:  行 566:  行 567:  行 568:      }//end class行 569:  }行 570:  行 571:  </pre></code>

                  </td>
               </tr>
            </table>

            

</div>

    <script type="text/javascript">
    function OnToggleTOCLevel1(level2ID)
    {
      var elemLevel2 = document.getElementById(level2ID);
      if (elemLevel2.style.display == 'none')
      {
        elemLevel2.style.display = '';
      }
      else {
        elemLevel2.style.display = 'none';
      }
    }
    </script>
                          <br><br>

            <hr width=100% size=1 color=silver>

            <b>版本信息:</b>?Microsoft .NET Framework 版本:2.0.50727.5472; ASP.NET 版本:2.0.50727.5456

            </font>

    </body>
</html>
<!-- 
[HttpCompileException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
   在 System.Web.Compilation.AssemblyBuilder.Compile()
   在 System.Web.Compilation.BuildProvidersCompiler.PerformBuild()
   在 System.Web.Compilation.CodeDirectoryCompiler.GetCodeDirectoryAssembly(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories, Boolean isDirectoryAllowed)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectory(VirtualPath virtualDir, CodeDirectoryType dirType, String assemblyName, StringSet excludedSubdirectories)
   在 System.Web.Compilation.BuildManager.CompileCodeDirectories()
   在 System.Web.Compilation.BuildManager.EnsureTopLevelFilesCompiled()
   在 System.Web.Hosting.HostingEnvironment.Initialize(ApplicationManager appManager, IApplicationHost appHost, IConfigMapPathFactory configMapPathFactory, HostingEnvironmentParameters hostingParameters)
[HttpException]: d:\果蔬在线\GS_WebService\GS_WebService\App_Code\SQLServerDAL\BllOrderInfoManage.cs(313): error CS0019: 运算符“-”无法应用于“string”和“decimal”类型的操作数
   在 System.Web.HttpRuntime.FirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.EnsureFirstRequestInit(HttpContext context)
   在 System.Web.HttpRuntime.ProcessRequestInternal(HttpWorkerRequest wr)
-->
--.
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.ReadResponse(SoapClientMessage message, WebResponse response, Stream responseStream, Boolean asyncCall)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 17:10:59,421 [9][INFO ][M] - System start.
2013-11-01 17:11:00,918 [9][INFO ][M] - 服务 [订单拣货详细数据送信] －－－－启动
2013-11-01 17:11:40,527 [6][INFO ][OrderInfoTimerManage] - [订单拣货确认]送信连接失败。
System.Net.WebException: 基础连接已经关闭: 接收时发生错误。 ---> System.IO.IOException: 无法从传输连接中读取数据: 远程主机强迫关闭了一个现有的连接。。 ---> System.Net.Sockets.SocketException: 远程主机强迫关闭了一个现有的连接。
   在 System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Net.ConnectStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   在 System.Net.HttpWebRequest.MakeMemoryStream(Stream stream)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 17:12:07,143 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]送信连接失败。
System.Net.WebException: 基础连接已经关闭: 接收时发生错误。 ---> System.IO.IOException: 无法从传输连接中读取数据: 远程主机强迫关闭了一个现有的连接。。 ---> System.Net.Sockets.SocketException: 远程主机强迫关闭了一个现有的连接。
   在 System.Net.Sockets.NetworkStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Net.ConnectStream.Read(Byte[] buffer, Int32 offset, Int32 size)
   在 System.Net.HttpWebRequest.MakeMemoryStream(Stream stream)
   --- 内部异常堆栈跟踪的结尾 ---
   在 System.Web.Services.Protocols.WebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.HttpWebClientProtocol.GetWebResponse(WebRequest request)
   在 System.Web.Services.Protocols.SoapHttpClientProtocol.Invoke(String methodName, Object[] parameters)
   在 CZZD.GSZX.S.UI.czzd.gszx.web.receive._Receive.GetSystemTime() 位置 D:\果蔬在线\GS_Send\UI\Web References\czzd.gszx.web.receive\Reference.cs:行号 93
   在 CZZD.GSZX.S.UI.OrderInfoTimerManage.SendOrderShipment() 位置 D:\果蔬在线\GS_Send\UI\Timer\OrderInfoTimerManage.cs:行号 132
2013-11-01 17:12:32,525 [16][INFO ][OrderInfoTimerManage] - [订单拣货确认]22送信成功。
2013-11-01 18:08:28,479 [9][INFO ][M] - System start.
2013-11-01 18:08:30,210 [9][INFO ][M] - 服务 [订单拣货确认送信] －－－－启动
2013-11-01 18:08:53,517 [12][INFO ][O] - [拣货确认]22送信成功。
2013-11-01 18:09:53,624 [9][INFO ][M] - System Quit.
2013-11-01 18:40:22,288 [8][INFO ][M] - System start.
2013-11-01 18:40:24,504 [8][INFO ][M] - 服务 [订单拣货确认送信] －－－－启动
2013-11-01 18:40:51,585 [11][INFO ][O] - [拣货确认][2013102434307]送信成功。
2013-11-01 18:44:07,382 [8][INFO ][M] - System Quit.
2013-11-01 18:45:20,062 [10][INFO ][M] - System start.
2013-11-01 18:45:21,341 [10][INFO ][M] - 服务 [订单拣货确认送信] －－－－启动
2013-11-01 18:45:41,356 [6][INFO ][O] - [拣货确认]－－－－开始.
2013-11-01 18:45:41,434 [6][INFO ][O] - [拣货确认]没有需要送信的数据。
