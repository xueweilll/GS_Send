//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5472
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.5472 版自动生成。
// 
#pragma warning disable 1591

namespace CZZD.GSZX.S.UI.czzd.gszx.web.receive {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="_ReceiveSoap", Namespace="http://czzd.gszx.web.receive")]
    public partial class _Receive : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSystemTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveOrderStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveOrderInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReceiveOrderInfosOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public _Receive() {
            this.Url = global::CZZD.GSZX.S.UI.Properties.Settings.Default.gszx_r_czzd_gszx_receive__Receive;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSystemTimeCompletedEventHandler GetSystemTimeCompleted;
        
        /// <remarks/>
        public event ReceiveOrderStatusCompletedEventHandler ReceiveOrderStatusCompleted;
        
        /// <remarks/>
        public event ReceiveOrderInfoCompletedEventHandler ReceiveOrderInfoCompleted;
        
        /// <remarks/>
        public event ReceiveOrderInfosCompletedEventHandler ReceiveOrderInfosCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://czzd.gszx.web.receive/GetSystemTime", RequestNamespace="http://czzd.gszx.web.receive", ResponseNamespace="http://czzd.gszx.web.receive", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSystemTime() {
            object[] results = this.Invoke("GetSystemTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemTimeAsync() {
            this.GetSystemTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetSystemTimeAsync(object userState) {
            if ((this.GetSystemTimeOperationCompleted == null)) {
                this.GetSystemTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemTimeOperationCompleted);
            }
            this.InvokeAsync("GetSystemTime", new object[0], this.GetSystemTimeOperationCompleted, userState);
        }
        
        private void OnGetSystemTimeOperationCompleted(object arg) {
            if ((this.GetSystemTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemTimeCompleted(this, new GetSystemTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://czzd.gszx.web.receive/ReceiveOrderStatus", RequestNamespace="http://czzd.gszx.web.receive", ResponseNamespace="http://czzd.gszx.web.receive", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceiveOrderStatus(string type, string orderIDs, string time, string keys) {
            object[] results = this.Invoke("ReceiveOrderStatus", new object[] {
                        type,
                        orderIDs,
                        time,
                        keys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveOrderStatusAsync(string type, string orderIDs, string time, string keys) {
            this.ReceiveOrderStatusAsync(type, orderIDs, time, keys, null);
        }
        
        /// <remarks/>
        public void ReceiveOrderStatusAsync(string type, string orderIDs, string time, string keys, object userState) {
            if ((this.ReceiveOrderStatusOperationCompleted == null)) {
                this.ReceiveOrderStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveOrderStatusOperationCompleted);
            }
            this.InvokeAsync("ReceiveOrderStatus", new object[] {
                        type,
                        orderIDs,
                        time,
                        keys}, this.ReceiveOrderStatusOperationCompleted, userState);
        }
        
        private void OnReceiveOrderStatusOperationCompleted(object arg) {
            if ((this.ReceiveOrderStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveOrderStatusCompleted(this, new ReceiveOrderStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://czzd.gszx.web.receive/ReceiveOrderInfo", RequestNamespace="http://czzd.gszx.web.receive", ResponseNamespace="http://czzd.gszx.web.receive", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceiveOrderInfo(string type, string orderId, string actualGoodsAmount, string values, string time, string keys) {
            object[] results = this.Invoke("ReceiveOrderInfo", new object[] {
                        type,
                        orderId,
                        actualGoodsAmount,
                        values,
                        time,
                        keys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveOrderInfoAsync(string type, string orderId, string actualGoodsAmount, string values, string time, string keys) {
            this.ReceiveOrderInfoAsync(type, orderId, actualGoodsAmount, values, time, keys, null);
        }
        
        /// <remarks/>
        public void ReceiveOrderInfoAsync(string type, string orderId, string actualGoodsAmount, string values, string time, string keys, object userState) {
            if ((this.ReceiveOrderInfoOperationCompleted == null)) {
                this.ReceiveOrderInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveOrderInfoOperationCompleted);
            }
            this.InvokeAsync("ReceiveOrderInfo", new object[] {
                        type,
                        orderId,
                        actualGoodsAmount,
                        values,
                        time,
                        keys}, this.ReceiveOrderInfoOperationCompleted, userState);
        }
        
        private void OnReceiveOrderInfoOperationCompleted(object arg) {
            if ((this.ReceiveOrderInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveOrderInfoCompleted(this, new ReceiveOrderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://czzd.gszx.web.receive/ReceiveOrderInfos", RequestNamespace="http://czzd.gszx.web.receive", ResponseNamespace="http://czzd.gszx.web.receive", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReceiveOrderInfos(string type, string xmlData, string time, string keys) {
            object[] results = this.Invoke("ReceiveOrderInfos", new object[] {
                        type,
                        xmlData,
                        time,
                        keys});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReceiveOrderInfosAsync(string type, string xmlData, string time, string keys) {
            this.ReceiveOrderInfosAsync(type, xmlData, time, keys, null);
        }
        
        /// <remarks/>
        public void ReceiveOrderInfosAsync(string type, string xmlData, string time, string keys, object userState) {
            if ((this.ReceiveOrderInfosOperationCompleted == null)) {
                this.ReceiveOrderInfosOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReceiveOrderInfosOperationCompleted);
            }
            this.InvokeAsync("ReceiveOrderInfos", new object[] {
                        type,
                        xmlData,
                        time,
                        keys}, this.ReceiveOrderInfosOperationCompleted, userState);
        }
        
        private void OnReceiveOrderInfosOperationCompleted(object arg) {
            if ((this.ReceiveOrderInfosCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReceiveOrderInfosCompleted(this, new ReceiveOrderInfosCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetSystemTimeCompletedEventHandler(object sender, GetSystemTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ReceiveOrderStatusCompletedEventHandler(object sender, ReceiveOrderStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveOrderStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveOrderStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ReceiveOrderInfoCompletedEventHandler(object sender, ReceiveOrderInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveOrderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveOrderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ReceiveOrderInfosCompletedEventHandler(object sender, ReceiveOrderInfosCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReceiveOrderInfosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReceiveOrderInfosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591